import { useState, useEffect, useCallback } from 'react';

export const useRealTimeSync = () => {
  const [gameState, setGameState] = useState({
    currentPhase: 'lobby',
    phases: { quiz: false, logic: false, contact: false, survey: false, auction: false },
    onlineUsers: 0,
    lastUpdated: null,
    connected: false
  });

  const [eventSource, setEventSource] = useState(null);

  useEffect(() => {
    // –°–æ–∑–¥–∞–µ–º SSE —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    const es = new EventSource('/api/websocket');
    setEventSource(es);

    es.onopen = () => {
      console.log('üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ä–µ–∞–ª—å–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
      setGameState(prev => ({ ...prev, connected: true }));
    };

    es.onmessage = (event) => {
      try {
        const data = JSON.parse(event.data);
        
        switch (data.type) {
          case 'initial_state':
            console.log('üì° –ü–æ–ª—É—á–µ–Ω–æ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', data);
            setGameState(prev => ({
              ...prev,
              currentPhase: data.currentPhase,
              phases: data.phases,
              onlineUsers: data.onlineUsers,
              lastUpdated: data.lastUpdated,
              connected: true
            }));
            break;

          case 'phase_changed':
            console.log('üîÑ –§–∞–∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞:', data.phase);
            setGameState(prev => ({
              ...prev,
              currentPhase: data.phase,
              lastUpdated: new Date(data.timestamp).toISOString()
            }));
            break;

          case 'phases_updated':
            console.log('‚öôÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–∑—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã:', data.phases);
            setGameState(prev => ({
              ...prev,
              phases: data.phases,
              lastUpdated: new Date(data.timestamp).toISOString()
            }));
            break;

          case 'heartbeat':
            // –ü—Ä–æ—Å—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º, —á—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∂–∏–≤–æ
            break;

          default:
            console.log('üì® –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', data);
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ SSE —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      }
    };

    es.onerror = (error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ SSE —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', error);
      setGameState(prev => ({ ...prev, connected: false }));
    };

    // –û—á–∏—â–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    return () => {
      es.close();
    };
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
  const updatePhase = useCallback(async (phase, adminToken) => {
    try {
      const response = await fetch('/api/websocket', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          type: 'phase_update',
          data: { phase },
          admin_token: adminToken
        })
      });

      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∞–∑—ã');
      }

      console.log('‚úÖ –§–∞–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', phase);
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∞–∑—ã:', error);
      return false;
    }
  }, []);

  const togglePhase = useCallback(async (phase, adminToken) => {
    try {
      const response = await fetch('/api/websocket', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          type: 'phase_toggle',
          data: { phase },
          admin_token: adminToken
        })
      });

      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ñ–∞–∑—ã');
      }

      console.log('‚úÖ –§–∞–∑–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∞:', phase);
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ñ–∞–∑—ã:', error);
      return false;
    }
  }, []);

  return {
    gameState,
    updatePhase,
    togglePhase
  };
};
