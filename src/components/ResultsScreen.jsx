import React, { useState, useEffect } from 'react';

const ResultsScreen = ({ 
  roundType, 
  earnedPoints, 
  answers, 
  totalQuestions, 
  timeSpent,
  onContinue 
}) => {
  const [showAnimation, setShowAnimation] = useState(false);
  const [currentStat, setCurrentStat] = useState(0);

  useEffect(() => {
    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    const timer = setTimeout(() => {
      setShowAnimation(true);
    }, 500);

    return () => clearTimeout(timer);
  }, []);

  useEffect(() => {
    if (showAnimation && currentStat < 4) {
      const timer = setTimeout(() => {
        setCurrentStat(prev => prev + 1);
      }, 800);
      
      return () => clearTimeout(timer);
    }
  }, [showAnimation, currentStat]);

  const correctAnswers = answers.filter(a => a.isCorrect).length;
  const accuracy = totalQuestions > 0 ? Math.round((correctAnswers / totalQuestions) * 100) : 0;
  const avgTime = totalQuestions > 0 ? Math.round(timeSpent / totalQuestions) : 0;

  const getRank = () => {
    if (accuracy >= 90) return { emoji: 'üèÜ', title: '–ú–ê–°–¢–ï–†', color: '#FFD700' };
    if (accuracy >= 75) return { emoji: 'ü•á', title: '–≠–ö–°–ü–ï–†–¢', color: '#4CAF50' };
    if (accuracy >= 60) return { emoji: 'ü•à', title: '–ó–ù–ê–¢–û–ö', color: '#2196F3' };
    if (accuracy >= 40) return { emoji: 'ü•â', title: '–ù–û–í–ò–ß–û–ö', color: '#FF9800' };
    return { emoji: 'üìö', title: '–£–ß–ï–ù–ò–ö', color: '#9E9E9E' };
  };

  const rank = getRank();

  const getRoundTitle = () => {
    switch(roundType) {
      case 'quiz': return '–ö–≤–∏–∑ –ø—Ä–æ Ballantine\'s';
      case 'logic': return '–ì–¥–µ –ª–æ–≥–∏–∫–∞?';
      case 'survey': return '100 –∫ 1';
      default: return '–ò–≥—Ä–∞';
    }
  };

  const getEncouragement = () => {
    if (accuracy >= 90) return '–ù–µ–≤–µ—Ä–æ—è—Ç–Ω–æ! –¢—ã –Ω–∞—Å—Ç–æ—è—â–∏–π –±–∞—Ä–Ω—ã–π –≥—É—Ä—É! üéØ';
    if (accuracy >= 75) return '–û—Ç–ª–∏—á–Ω–æ! –¢—ã –∑–Ω–∞–µ—à—å —Ç–æ–ª–∫ –≤ –±–∞—Ä–Ω–æ–º –¥–µ–ª–µ! üç∏';
    if (accuracy >= 60) return '–•–æ—Ä–æ—à–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–π –∏–∑—É—á–∞—Ç—å –º–∏—Ä –∫–æ–∫—Ç–µ–π–ª–µ–π! ü•É';
    if (accuracy >= 40) return '–ù–µ–ø–ª–æ—Ö–æ! –ï—Å—Ç—å –∫ —á–µ–º—É —Å—Ç—Ä–µ–º–∏—Ç—å—Å—è! üìà';
    return '–ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Å—è, –æ–ø—ã—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç —Å –ø—Ä–∞–∫—Ç–∏–∫–æ–π! üí™';
  };

  return (
    <div className="results-screen">
      <div className="results-container">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="results-header">
          <h2>üéâ –†–∞—É–Ω–¥ –∑–∞–≤–µ—Ä—à–µ–Ω!</h2>
          <h3>{getRoundTitle()}</h3>
        </div>

        {/* –ì–ª–∞–≤–Ω—ã–π —Å—á–µ—Ç */}
        <div className={`main-score ${showAnimation ? 'animate-in' : ''}`}>
          <div className="score-circle">
            <div className="score-number">{earnedPoints}</div>
            <div className="score-label">–ë–ê–õ–õ–û–í</div>
          </div>
          
          <div className="rank-badge" style={{ borderColor: rank.color }}>
            <div className="rank-emoji">{rank.emoji}</div>
            <div className="rank-title" style={{ color: rank.color }}>{rank.title}</div>
          </div>
        </div>

        {/* –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
        <div className="stats-grid">
          <div className={`stat-item ${currentStat >= 0 ? 'show' : ''}`}>
            <div className="stat-icon">‚úÖ</div>
            <div className="stat-value">{correctAnswers}</div>
            <div className="stat-label">–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤</div>
          </div>
          
          <div className={`stat-item ${currentStat >= 1 ? 'show' : ''}`}>
            <div className="stat-icon">üéØ</div>
            <div className="stat-value">{accuracy}%</div>
            <div className="stat-label">–¢–æ—á–Ω–æ—Å—Ç—å</div>
          </div>
          
          <div className={`stat-item ${currentStat >= 2 ? 'show' : ''}`}>
            <div className="stat-icon">‚ö°</div>
            <div className="stat-value">{avgTime}—Å</div>
            <div className="stat-label">–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è</div>
          </div>
          
          <div className={`stat-item ${currentStat >= 3 ? 'show' : ''}`}>
            <div className="stat-icon">üèÅ</div>
            <div className="stat-value">{Math.round(timeSpent / 60)}:{String(Math.round(timeSpent % 60)).padStart(2, '0')}</div>
            <div className="stat-label">–û–±—â–µ–µ –≤—Ä–µ–º—è</div>
          </div>
        </div>

        {/* –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ */}
        <div className={`encouragement ${currentStat >= 4 ? 'show' : ''}`}>
          <p>{getEncouragement()}</p>
        </div>

        {/* –î–µ—Ç–∞–ª–∏ –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º (—Ç–æ–ª—å–∫–æ –¥–ª—è –∫–≤–∏–∑–∞ –∏ –ª–æ–≥–∏–∫–∏) */}
        {(roundType === 'quiz' || roundType === 'logic') && (
          <div className={`answers-breakdown ${currentStat >= 4 ? 'show' : ''}`}>
            <h4>üìã –î–µ—Ç–∞–ª–∏ –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º:</h4>
            <div className="answers-list">
              {answers.slice(0, 5).map((answer, index) => (
                <div key={index} className={`answer-detail ${answer.isCorrect ? 'correct' : 'incorrect'}`}>
                  <span className="question-num">#{index + 1}</span>
                  <span className="answer-status">
                    {answer.isCorrect ? '‚úÖ' : '‚ùå'}
                  </span>
                  <span className="answer-points">+{answer.points}</span>
                </div>
              ))}
              {answers.length > 5 && (
                <div className="more-answers">
                  ... –∏ –µ—â–µ {answers.length - 5} –≤–æ–ø—Ä–æ—Å–æ–≤
                </div>
              )}
            </div>
          </div>
        )}

        {/* –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å */}
        <button 
          className={`continue-btn ${currentStat >= 4 ? 'show' : ''}`}
          onClick={onContinue}
        >
          üöÄ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–≥—Ä—É
        </button>
      </div>
    </div>
  );
};

export default ResultsScreen;
