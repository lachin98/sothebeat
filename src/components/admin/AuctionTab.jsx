import React, { useState, useEffect, useRef } from 'react';

const AuctionTab = ({ adminToken }) => {
  const [lots, setLots] = useState([]);
  const [activeLot, setActiveLot] = useState(null);
  const [timeLeft, setTimeLeft] = useState(0);
  const [liveBids, setLiveBids] = useState([]);
  const [loading, setLoading] = useState(true);
  const [newLot, setNewLot] = useState({
    title: '',
    description: '',
    starting_price: 200,
    image_url: ''
  });
  const [winnerMessage, setWinnerMessage] = useState('');
  const [showWinnerModal, setShowWinnerModal] = useState(false);
  const [selectedLotForWinner, setSelectedLotForWinner] = useState(null);
  
  const bidsEndRef = useRef(null);

  useEffect(() => {
    fetchLots();
    fetchActiveLot();
    fetchLiveBids();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –ª–æ—Ç –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
    const interval = setInterval(() => {
      fetchActiveLot();
      fetchLiveBids();
    }, 1000);
    
    return () => clearInterval(interval);
  }, []);

  // –ê–≤—Ç–æ—Å–∫—Ä–æ–ª–ª —á–∞—Ç–∞ –≤–Ω–∏–∑ –ø—Ä–∏ –Ω–æ–≤—ã—Ö —Å—Ç–∞–≤–∫–∞—Ö
  useEffect(() => {
    scrollToBottom();
  }, [liveBids]);

  const scrollToBottom = () => {
    bidsEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  const fetchLots = async () => {
    try {
      const response = await fetch('/api/auction?action=lots');
      if (response.ok) {
        const data = await response.json();
        setLots(data);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ—Ç–æ–≤:', error);
    }
    setLoading(false);
  };

  const fetchActiveLot = async () => {
    try {
      const response = await fetch('/api/auction?action=active');
      if (response.ok) {
        const data = await response.json();
        setActiveLot(data.lot);
        setTimeLeft(data.timeLeft || 0);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ª–æ—Ç–∞:', error);
    }
  };

  const fetchLiveBids = async () => {
    try {
      const response = await fetch(`/api/auction?action=live_bids&admin_token=${adminToken}&limit=100`);
      if (response.ok) {
        const data = await response.json();
        setLiveBids(data);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–∞ —Å—Ç–∞–≤–æ–∫:', error);
    }
  };

  const handleStartLot = async (lotId) => {
    if (!confirm('–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞—É–∫—Ü–∏–æ–Ω –ø–æ —ç—Ç–æ–º—É –ª–æ—Ç—É –Ω–∞ 60 —Å–µ–∫—É–Ω–¥?')) return;

    try {
      const response = await fetch('/api/auction', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          action: 'start_lot',
          lot_id: lotId,
          admin_token: adminToken
        })
      });

      if (response.ok) {
        const result = await response.json();
        alert(`‚úÖ ${result.message}`);
        fetchLots();
        fetchActiveLot();
      } else {
        alert('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞—É–∫—Ü–∏–æ–Ω–∞');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ª–æ—Ç–∞:', error);
      alert('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
    }
  };

  const handleEndLot = async (lotId) => {
    if (!confirm('–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∞—É–∫—Ü–∏–æ–Ω?')) return;

    try {
      const response = await fetch('/api/auction', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          action: 'end_lot',
          lot_id: lotId,
          admin_token: adminToken
        })
      });

      if (response.ok) {
        const result = await response.json();
        alert(`‚úÖ ${result.message}`);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        setSelectedLotForWinner(lotId);
        if (result.winner) {
          setWinnerMessage(`üèÜ –õ–æ—Ç "${result.winner.lot_title || '–õ–æ—Ç'}" –ø—Ä–æ–¥–∞–Ω!\n\n–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: ${result.winner.user_name}\n–ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞: ${result.final_price} –±–∞–ª–ª–æ–≤\n\n–ü—Ä–æ–¥–∞–Ω—ã —Ä–∞–∑, –ø—Ä–æ–¥–∞–Ω—ã –¥–≤–∞, –ø—Ä–æ–¥–∞–Ω—ã —Ç—Ä–∏! üî•`);
        } else {
          setWinnerMessage(`–õ–æ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω –±–µ–∑ —Å—Ç–∞–≤–æ–∫.`);
        }
        setShowWinnerModal(true);
        
        fetchLots();
        fetchActiveLot();
      } else {
        alert('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞—É–∫—Ü–∏–æ–Ω–∞');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ª–æ—Ç–∞:', error);
      alert('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
    }
  };

  const handleAnnounceWinner = async () => {
    if (!winnerMessage.trim()) {
      alert('–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è');
      return;
    }

    try {
      const response = await fetch('/api/auction', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          action: 'announce_winner',
          lot_id: selectedLotForWinner,
          winner_message: winnerMessage,
          admin_token: adminToken
        })
      });

      if (response.ok) {
        alert('üì¢ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–∞–Ω–æ!');
        setShowWinnerModal(false);
        setWinnerMessage('');
        setSelectedLotForWinner(null);
      } else {
        alert('‚ùå –û—à–∏–±–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', error);
      alert('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
    }
  };

  const handleAddLot = async () => {
    if (!newLot.title.trim()) {
      alert('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–æ—Ç–∞');
      return;
    }

    try {
      const response = await fetch('/api/auction', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          action: 'add_lot',
          admin_token: adminToken,
          ...newLot
        })
      });

      if (response.ok) {
        alert('‚úÖ –õ–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω!');
        setNewLot({
          title: '',
          description: '',
          starting_price: 200,
          image_url: ''
        });
        fetchLots();
      } else {
        alert('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–æ—Ç–∞');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–æ—Ç–∞:', error);
      alert('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
    }
  };

  const formatTime = (seconds) => {
    if (seconds <= 0) return '–ó–∞–≤–µ—Ä—à–µ–Ω';
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  };

  const formatBidTime = (dateString) => {
    const date = new Date(dateString);
    return date.toLocaleTimeString();
  };

  const getLotStatus = (lot) => {
    if (lot.is_completed) return { text: '–ó–∞–≤–µ—Ä—à–µ–Ω', color: '#888', icon: '‚úÖ' };
    if (lot.is_active) return { text: '–ê–∫—Ç–∏–≤–µ–Ω', color: '#4caf50', icon: 'üî•' };
    return { text: '–û–∂–∏–¥–∞–µ—Ç', color: '#2196f3', icon: '‚è≥' };
  };

  if (loading) {
    return <div className="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ—Ç–æ–≤...</div>;
  }

  return (
    <div className="auction-tab">
      <div className="tab-header">
        <h2>üèõÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞—É–∫—Ü–∏–æ–Ω–æ–º</h2>
        <div className="tab-controls">
          <button className="btn btn-secondary" onClick={fetchLots}>
            üîÑ –û–±–Ω–æ–≤–∏—Ç—å
          </button>
        </div>
      </div>

      <div className="auction-admin-layout">
        {/* –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ */}
        <div className="auction-control-panel">
          {/* –¢–µ–∫—É—â–∏–π –∞—É–∫—Ü–∏–æ–Ω */}
          {activeLot && (
            <div className="current-auction">
              <h3>üî• –¢–µ–∫—É—â–∏–π –∞—É–∫—Ü–∏–æ–Ω</h3>
              <div className="active-lot-card">
                <div className="lot-image">
                  <img src={activeLot.image_url} alt={activeLot.title} />
                </div>
                <div className="lot-details">
                  <h4>{activeLot.title}</h4>
                  <div className="lot-stats">
                    <div className="stat">
                      <span className="label">–°—Ç–∞—Ä—Ç–æ–≤–∞—è:</span>
                      <span className="value">{activeLot.starting_price}</span>
                    </div>
                    <div className="stat">
                      <span className="label">–¢–µ–∫—É—â–∞—è:</span>
                      <span className="value highlight">{activeLot.current_price}</span>
                    </div>
                    <div className="stat">
                      <span className="label">–°—Ç–∞–≤–æ–∫:</span>
                      <span className="value">{activeLot.bid_count}</span>
                    </div>
                    {activeLot.leading_bidder && (
                      <div className="stat">
                        <span className="label">–õ–∏–¥–∏—Ä—É–µ—Ç:</span>
                        <span className="value winner">{activeLot.leading_bidder}</span>
                      </div>
                    )}
                  </div>
                  
                  <div className="auction-controls">
                    <div className={`timer ${timeLeft <= 10 ? 'urgent' : ''}`}>
                      ‚è∞ {formatTime(timeLeft)}
                    </div>
                    <button 
                      className="btn btn-warning"
                      onClick={() => handleEndLot(activeLot.id)}
                    >
                      üõë –ó–∞–≤–µ—Ä—à–∏—Ç—å –∞—É–∫—Ü–∏–æ–Ω
                    </button>
                  </div>
                </div>
              </div>
            </div>
          )}

          {/* –°–ø–∏—Å–æ–∫ –ª–æ—Ç–æ–≤ */}
          <div className="lots-list-compact">
            <h3>üìã –í—Å–µ –ª–æ—Ç—ã</h3>
            {lots.map((lot) => {
              const status = getLotStatus(lot);
              return (
                <div key={lot.id} className="lot-item-compact">
                  <div className="lot-info">
                    <span className="lot-number">#{lot.order_num}</span>
                    <span className="lot-title">{lot.title}</span>
                    <span className={`lot-status`} style={{ color: status.color }}>
                      {status.icon} {status.text}
                    </span>
                  </div>
                  
                  <div className="lot-actions">
                    {!lot.is_completed && !lot.is_active && (
                      <button 
                        className="btn btn-small btn-success"
                        onClick={() => handleStartLot(lot.id)}
                      >
                        ‚ñ∂Ô∏è
                      </button>
                    )}
                    
                    {lot.winner_name && (
                      <span className="winner-badge">üëë {lot.winner_name}</span>
                    )}
                  </div>
                </div>
              );
            })}
          </div>
        </div>

        {/* –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –∂–∏–≤–æ–π —á–∞—Ç —Å—Ç–∞–≤–æ–∫ */}
        <div className="live-bids-panel">
          <h3>üí¨ –ñ–∏–≤–æ–π —á–∞—Ç —Å—Ç–∞–≤–æ–∫</h3>
          <div className="bids-chat">
            {liveBids.length === 0 ? (
              <div className="no-bids-yet">
                –ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –¥–µ–ª–∞–ª —Å—Ç–∞–≤–æ–∫...
              </div>
            ) : (
              liveBids.map((bid) => (
                <div key={bid.id} className={`bid-message ${bid.is_leading ? 'leading' : ''} ${bid.lot_is_active ? 'active-lot' : 'inactive-lot'}`}>
                  <div className="bid-header">
                    <span className="bid-user">
                      {bid.is_leading && 'üëë'} {bid.user_name}
                      {bid.team_id && <span className="team-tag">üë•{bid.team_id}</span>}
                    </span>
                    <span className="bid-time">{formatBidTime(bid.created_at)}</span>
                  </div>
                  
                  <div className="bid-content">
                    <div className="bid-amount">üí∞ {bid.bid_amount} –±–∞–ª–ª–æ–≤</div>
                    <div className="bid-lot">–Ω–∞ "{bid.lot_title}"</div>
                  </div>
                  
                  {bid.is_leading && bid.lot_is_active && (
                    <div className="leading-indicator">üî• –õ–ò–î–ò–†–£–ï–¢</div>
                  )}
                </div>
              ))
            )}
            <div ref={bidsEndRef} />
          </div>
          
          <div className="chat-stats">
            üìä –í—Å–µ–≥–æ —Å—Ç–∞–≤–æ–∫: {liveBids.length}
          </div>
        </div>
      </div>

      {/* –ú–æ–¥–∞–ª –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è */}
      {showWinnerModal && (
        <div className="winner-modal">
          <div className="modal-content">
            <h3>üì¢ –û–±—ä—è–≤–∏—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è</h3>
            <textarea
              value={winnerMessage}
              onChange={(e) => setWinnerMessage(e.target.value)}
              placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è..."
              rows={6}
            />
            <div className="modal-actions">
              <button 
                className="btn btn-primary"
                onClick={handleAnnounceWinner}
              >
                üì¢ –û–±—ä—è–≤–∏—Ç—å
              </button>
              <button 
                className="btn btn-secondary"
                onClick={() => setShowWinnerModal(false)}
              >
                –û—Ç–º–µ–Ω–∞
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default AuctionTab;
