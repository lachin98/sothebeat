import React, { useState, useEffect, useRef } from "react";
import firstImg from "../../images/1.jpg";
import secondImg from "../../images/2.jpg";
import thirdImg from "../../images/3.jpg";
import fourthImg from "../../images/4.jpg";
import fifthImg from "../../images/5.jpg";
import sixImg from "../../images/6.jpg";
import seventhImg from "../../images/7.jpg";

const AuctionTab = ({ adminToken }) => {
  const [lots, setLots] = useState([]);
  const [activeLot, setActiveLot] = useState(null);
  const [liveBids, setLiveBids] = useState([]);
  const [loading, setLoading] = useState(true);
  const [newLot, setNewLot] = useState({
    title: "",
    description: "",
    starting_price: 200,
    image_url: "",
  });
  const [winnerMessage, setWinnerMessage] = useState("");
  const [showWinnerModal, setShowWinnerModal] = useState(false);
  const [selectedLotForWinner, setSelectedLotForWinner] = useState(null);
  const [showResetModal, setShowResetModal] = useState(false);
  const [resetting, setResetting] = useState(false);

  const bidsEndRef = useRef(null);

  useEffect(() => {
    fetchLots();
    fetchActiveLot();
    fetchLiveBids();

    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
    const interval = setInterval(() => {
      fetchActiveLot();
      fetchLiveBids();
    }, 2000);

    return () => clearInterval(interval);
  }, []);

  // –ê–≤—Ç–æ—Å–∫—Ä–æ–ª–ª —á–∞—Ç–∞ –≤–Ω–∏–∑ –ø—Ä–∏ –Ω–æ–≤—ã—Ö —Å—Ç–∞–≤–∫–∞—Ö
  useEffect(() => {
    scrollToBottom();
  }, [liveBids]);

  const scrollToBottom = () => {
    bidsEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  const fetchLots = async () => {
    try {
      const response = await fetch("/api/auction?action=lots");
      if (response.ok) {
        const data = await response.json();
        setLots(data);
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ—Ç–æ–≤:", error);
    }
    setLoading(false);
  };

  const fetchActiveLot = async () => {
    try {
      const response = await fetch("/api/auction?action=active");
      if (response.ok) {
        const data = await response.json();
        setActiveLot(data.lot);
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ª–æ—Ç–∞:", error);
    }
  };

  const fetchLiveBids = async () => {
    try {
      const response = await fetch(
        `/api/auction?action=live_bids&admin_token=${adminToken}&limit=100`
      );
      if (response.ok) {
        const data = await response.json();
        setLiveBids(data);
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–∞ —Å—Ç–∞–≤–æ–∫:", error);
    }
  };

  const handleResetLot = async (lotId, lotTitle) => {
    if (
      !confirm(
        `–°–±—Ä–æ—Å–∏—Ç—å –ª–æ—Ç "${lotTitle}"?\n\n‚ö†Ô∏è –≠—Ç–æ –≤–µ—Ä–Ω–µ—Ç –≤—Å–µ –±–∞–ª–ª—ã —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∏ –æ—á–∏—Å—Ç–∏—Ç –≤—Å–µ —Å—Ç–∞–≤–∫–∏ –ø–æ —ç—Ç–æ–º—É –ª–æ—Ç—É.`
      )
    )
      return;

    try {
      const response = await fetch("/api/auction", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          action: "reset_lot",
          lot_id: lotId,
          admin_token: adminToken,
        }),
      });

      if (response.ok) {
        const result = await response.json();
        alert(
          `‚úÖ ${result.message}\n\n–í–æ–∑–≤—Ä–∞—â–µ–Ω–æ: ${result.stats.points_returned} –±–∞–ª–ª–æ–≤\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${result.stats.users_affected}\n–°—Ç–∞–≤–æ–∫ –æ—á–∏—â–µ–Ω–æ: ${result.stats.bids_cleared}`
        );

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        fetchLots();
        fetchActiveLot();
        fetchLiveBids();
      } else {
        const error = await response.json();
        alert(`‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ª–æ—Ç–∞: ${error.error}`);
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ª–æ—Ç–∞:", error);
      alert("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏");
    }
  };

  const handleResetAuction = async () => {
    if (resetting) return;

    setResetting(true);
    try {
      const response = await fetch("/api/auction", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          action: "reset_auction",
          admin_token: adminToken,
        }),
      });

      if (response.ok) {
        const result = await response.json();
        alert(
          `‚úÖ ${result.message}\n\n–í–æ–∑–≤—Ä–∞—â–µ–Ω–æ: ${result.stats.points_returned} –±–∞–ª–ª–æ–≤\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${result.stats.users_affected}\n–°—Ç–∞–≤–æ–∫ –æ—á–∏—â–µ–Ω–æ: ${result.stats.bids_cleared}`
        );
        setShowResetModal(false);

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        fetchLots();
        fetchActiveLot();
        fetchLiveBids();
      } else {
        const error = await response.json();
        alert(`‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞: ${error.error}`);
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –∞—É–∫—Ü–∏–æ–Ω–∞:", error);
      alert("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏");
    }
    setResetting(false);
  };

  const handleStartLot = async (lotId) => {
    const lot = lots.find((l) => l.id === lotId);
    if (
      !confirm(
        `–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞—É–∫—Ü–∏–æ–Ω –ø–æ –ª–æ—Ç—É:\n"${lot?.title}"\n\n–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –≤—Ä—É—á–Ω—É—é!`
      )
    )
      return;

    try {
      const response = await fetch("/api/auction", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          action: "start_lot",
          lot_id: lotId,
          admin_token: adminToken,
        }),
      });

      if (response.ok) {
        const result = await response.json();
        alert(`‚úÖ ${result.message}`);
        fetchLots();
        fetchActiveLot();
      } else {
        alert("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞—É–∫—Ü–∏–æ–Ω–∞");
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ª–æ—Ç–∞:", error);
      alert("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏");
    }
  };

  const handleEndLot = async (lotId) => {
    const lot = activeLot;
    if (
      !confirm(
        `–ó–∞–≤–µ—Ä—à–∏—Ç—å –∞—É–∫—Ü–∏–æ–Ω –ø–æ –ª–æ—Ç—É:\n"${lot?.title}"\n\n–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –∏ —Å–ø–∏—Å–∞—Ç—å –±–∞–ª–ª—ã?`
      )
    )
      return;

    try {
      const response = await fetch("/api/auction", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          action: "end_lot",
          lot_id: lotId,
          admin_token: adminToken,
        }),
      });

      if (response.ok) {
        const result = await response.json();

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        setSelectedLotForWinner(lotId);
        if (result.winner) {
          const winnerDisplay = `${result.winner.user_name}${
            result.winner.winner_username
              ? ` (@${result.winner.winner_username})`
              : ""
          }`;
          setWinnerMessage(
            `üé™ –í–Ω–∏–º–∞–Ω–∏–µ! –¢–æ—Ä–≥–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!\n\nüèÜ –õ–æ—Ç "${result.winner.lot_title}" –ø—Ä–æ–¥–∞–Ω!\n\n–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: ${winnerDisplay}\n–ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞: ${result.final_price} –±–∞–ª–ª–æ–≤\n\nüì£ –ü—Ä–æ–¥–∞–Ω–æ —Ä–∞–∑, –ø—Ä–æ–¥–∞–Ω–æ –¥–≤–∞, –ø—Ä–æ–¥–∞–Ω–æ —Ç—Ä–∏!\n–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è! üéâ`
          );
        } else {
          setWinnerMessage(
            `üé™ –¢–æ—Ä–≥–∏ –ø–æ –ª–æ—Ç—É "${result.lot_title}" –∑–∞–≤–µ—Ä—à–µ–Ω—ã.\n\n–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∏–∫—Ç–æ –Ω–µ —Å–¥–µ–ª–∞–ª —Å—Ç–∞–≤–∫—É.\n–õ–æ—Ç —Å–Ω—è—Ç —Å —Ç–æ—Ä–≥–æ–≤.`
          );
        }
        setShowWinnerModal(true);

        fetchLots();
        fetchActiveLot();
      } else {
        alert("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞—É–∫—Ü–∏–æ–Ω–∞");
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ª–æ—Ç–∞:", error);
      alert("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏");
    }
  };

  const handleAnnounceWinner = async () => {
    if (!winnerMessage.trim()) {
      alert("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è");
      return;
    }

    try {
      const response = await fetch("/api/auction", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          action: "announce_winner",
          lot_id: selectedLotForWinner,
          winner_message: winnerMessage,
          admin_token: adminToken,
        }),
      });

      if (response.ok) {
        alert("üì¢ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ!\n–¢–µ–∫—Å—Ç –º–æ–∂–Ω–æ –∑–∞—á–∏—Ç–∞—Ç—å –≥–æ—Å—Ç—è–º.");
        setShowWinnerModal(false);
        setWinnerMessage("");
        setSelectedLotForWinner(null);
      } else {
        alert("‚ùå –û—à–∏–±–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è");
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:", error);
      alert("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏");
    }
  };

  const handleAddLot = async () => {
    if (!newLot.title.trim()) {
      alert("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–æ—Ç–∞");
      return;
    }

    try {
      const response = await fetch("/api/auction", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          action: "add_lot",
          admin_token: adminToken,
          ...newLot,
        }),
      });

      if (response.ok) {
        alert("‚úÖ –õ–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω!");
        setNewLot({
          title: "",
          description: "",
          starting_price: 200,
          image_url: "",
        });
        fetchLots();
      } else {
        alert("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–æ—Ç–∞");
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–æ—Ç–∞:", error);
      alert("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏");
    }
  };

  const formatBidTime = (dateString) => {
    const date = new Date(dateString);
    return date.toLocaleTimeString();
  };

  const getLotStatus = (lot) => {
    if (lot.is_completed)
      return { text: "–ó–∞–≤–µ—Ä—à–µ–Ω", color: "#888", icon: "‚úÖ" };
    if (lot.is_active) return { text: "–ê–ö–¢–ò–í–ï–ù", color: "#4caf50", icon: "üî•" };
    return { text: "–û–∂–∏–¥–∞–µ—Ç", color: "#2196f3", icon: "‚è≥" };
  };

  const formatUserDisplay = (bid) => {
    return `${bid.user_name}${
      bid.user_username ? ` (@${bid.user_username})` : ""
    }`;
  };

  if (loading) {
    return <div className="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ—Ç–æ–≤...</div>;
  }

  return (
    <div className="auction-tab">
      <div className="tab-header">
        <h2>üèõÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞—É–∫—Ü–∏–æ–Ω–æ–º</h2>
        <div className="tab-controls">
          <button
            className="btn btn-danger"
            onClick={() => setShowResetModal(true)}
            title="–°–±—Ä–æ—Å–∏—Ç—å –≤–µ—Å—å –∞—É–∫—Ü–∏–æ–Ω"
          >
            üîÑ –°–±—Ä–æ—Å –∞—É–∫—Ü–∏–æ–Ω–∞
          </button>
          <button
            className="btn btn-secondary"
            onClick={() => {
              fetchLots();
              fetchActiveLot();
              fetchLiveBids();
            }}
          >
            üîÑ –û–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ
          </button>
        </div>
      </div>

      <div className="auction-admin-layout">
        {/* –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ */}
        <div className="auction-control-panel">
          {/* –¢–µ–∫—É—â–∏–π –∞—É–∫—Ü–∏–æ–Ω */}
          {activeLot ? (
            <div className="current-auction">
              <h3>üî• –ê–ö–¢–ò–í–ù–´–ô –ê–£–ö–¶–ò–û–ù</h3>
              <div className="active-lot-card">
                <div className="lot-image">
                  <img
                    src={
                      activeLot.order_num === 1
                        ? secondImg
                        : activeLot.order_num === 2
                        ? sixImg
                        : activeLot.order_num === 3
                        ? firstImg
                        : activeLot.order_num === 4
                        ? seventhImg
                        : activeLot.order_num === 5
                        ? thirdImg
                        : activeLot.order_num === 6
                        ? fourthImg
                        : activeLot.order_num === 7
                        ? fifthImg
                        : ""
                    }
                    alt={activeLot.title}
                  />
                </div>
                <div className="lot-details">
                  <h4>{activeLot.title}</h4>
                  <p className="lot-description">{activeLot.description}</p>

                  <div className="lot-stats">
                    <div className="stat">
                      <span className="label">–°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞:</span>
                      <span className="value">{activeLot.starting_price}</span>
                    </div>
                    <div className="stat">
                      <span className="label">–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:</span>
                      <span className="value highlight">
                        {activeLot.current_price}
                      </span>
                    </div>
                    <div className="stat">
                      <span className="label">–í—Å–µ–≥–æ —Å—Ç–∞–≤–æ–∫:</span>
                      <span className="value">{activeLot.bid_count}</span>
                    </div>
                    {activeLot.leading_bidder && (
                      <div className="stat leading-stat">
                        <span className="label">üëë –õ–∏–¥–∏—Ä—É–µ—Ç:</span>
                        <span className="value winner">
                          {activeLot.leading_bidder}
                          {activeLot.leading_username && (
                            <span className="username">
                              @{activeLot.leading_username}
                            </span>
                          )}
                        </span>
                      </div>
                    )}
                  </div>

                  <div className="auction-controls">
                    <div className="status-indicator active">‚ö° –¢–û–†–ì–ò –ò–î–£–¢</div>
                    <button
                      className="btn btn-danger btn-large"
                      onClick={() => handleEndLot(activeLot.id)}
                    >
                      üõë –ó–ê–í–ï–†–®–ò–¢–¨ –¢–û–†–ì–ò
                    </button>
                  </div>
                </div>
              </div>
            </div>
          ) : (
            <div className="no-active-auction">
              <h3>‚è≥ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤</h3>
              <p>–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞—É–∫—Ü–∏–æ–Ω–∞</p>
            </div>
          )}

          {/* –°–ø–∏—Å–æ–∫ –ª–æ—Ç–æ–≤ */}
          <div className="lots-list-compact">
            <h3>üìã –í—Å–µ –ª–æ—Ç—ã ({lots.length})</h3>
            {lots.map((lot) => {
              const status = getLotStatus(lot);
              return (
                <div
                  key={lot.id}
                  className={`lot-item-compact ${
                    lot.is_active ? "active" : ""
                  }`}
                >
                  <div className="lot-info">
                    <span className="lot-number">#{lot.order_num}</span>
                    <span className="lot-title">{lot.title}</span>
                    <span
                      className={`lot-status`}
                      style={{ color: status.color }}
                    >
                      {status.icon} {status.text}
                    </span>
                  </div>

                  <div className="lot-actions">
                    {!lot.is_completed && !lot.is_active && (
                      <button
                        className="btn btn-small btn-success"
                        onClick={() => handleStartLot(lot.id)}
                        title={`–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞—É–∫—Ü–∏–æ–Ω: ${lot.title}`}
                      >
                        ‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫
                      </button>
                    )}

                    {lot.is_completed && (
                      <button
                        className="btn btn-small btn-warning"
                        onClick={() => handleResetLot(lot.id, lot.title)}
                        title="–°–±—Ä–æ—Å–∏—Ç—å —ç—Ç–æ—Ç –ª–æ—Ç –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤"
                      >
                        üîÑ –°–±—Ä–æ—Å
                      </button>
                    )}

                    {lot.winner_name && (
                      <span className="winner-badge">
                        üëë {lot.winner_name}
                        {lot.winner_username && (
                          <span className="winner-username">
                            @{lot.winner_username}
                          </span>
                        )}
                      </span>
                    )}
                  </div>
                </div>
              );
            })}
          </div>
        </div>

        {/* –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –∂–∏–≤–æ–π —á–∞—Ç —Å—Ç–∞–≤–æ–∫ */}
        <div className="live-bids-panel">
          <h3>üí¨ –ñ–∏–≤–æ–π —á–∞—Ç —Å—Ç–∞–≤–æ–∫</h3>
          <div className="bids-chat">
            {liveBids.length === 0 ? (
              <div className="no-bids-yet">
                <div className="empty-icon">üí≠</div>
                <p>–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –¥–µ–ª–∞–ª —Å—Ç–∞–≤–æ–∫...</p>
                <p className="hint">–°—Ç–∞–≤–∫–∏ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏</p>
              </div>
            ) : (
              liveBids.map((bid) => (
                <div
                  key={bid.id}
                  className={`bid-message ${bid.is_leading ? "leading" : ""} ${
                    bid.lot_is_active ? "active-lot" : "inactive-lot"
                  }`}
                >
                  <div className="bid-header">
                    <span className="bid-user">
                      {bid.is_leading && "üëë"}
                      <strong>{formatUserDisplay(bid)}</strong>
                      {bid.team_id && (
                        <span className="team-tag">üë•{bid.team_id}</span>
                      )}
                    </span>
                    <span className="bid-time">
                      {formatBidTime(bid.created_at)}
                    </span>
                  </div>

                  <div className="bid-content">
                    <div className="bid-amount">
                      üí∞ {bid.bid_amount.toLocaleString()} –±–∞–ª–ª–æ–≤
                    </div>
                    <div className="bid-lot">–Ω–∞ –ª–æ—Ç: "{bid.lot_title}"</div>
                  </div>

                  {bid.is_leading && bid.lot_is_active && (
                    <div className="leading-indicator">üî• –õ–ò–î–ò–†–£–ï–¢</div>
                  )}
                </div>
              ))
            )}
            <div ref={bidsEndRef} />
          </div>

          <div className="chat-stats">
            üìä –í—Å–µ–≥–æ —Å—Ç–∞–≤–æ–∫ —Å–µ–≥–æ–¥–Ω—è: <strong>{liveBids.length}</strong>
            {activeLot && (
              <div>
                üî• –ê–∫—Ç–∏–≤–Ω—ã–π –ª–æ—Ç: <strong>{activeLot.title}</strong>
              </div>
            )}
          </div>
        </div>
      </div>

      {/* –ú–æ–¥–∞–ª —Å–±—Ä–æ—Å–∞ –≤—Å–µ–≥–æ –∞—É–∫—Ü–∏–æ–Ω–∞ */}
      {showResetModal && (
        <div className="winner-modal">
          <div className="modal-content">
            <h3>ÔøΩÔøΩ –°–±—Ä–æ—Å –≤—Å–µ–≥–æ –∞—É–∫—Ü–∏–æ–Ω–∞</h3>
            <p className="modal-description warning">
              ‚ö†Ô∏è <strong>–í–Ω–∏–º–∞–Ω–∏–µ!</strong> –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ:
            </p>
            <ul className="reset-warning-list">
              <li>üîÑ –í–µ—Ä–Ω–µ—Ç –í–°–ï –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã–µ –±–∞–ª–ª—ã –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º</li>
              <li>üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç –≤—Å–µ —Å—Ç–∞–≤–∫–∏ –ø–æ –≤—Å–µ–º –ª–æ—Ç–∞–º</li>
              <li>üìã –°–±—Ä–æ—Å–∏—Ç –≤—Å–µ –ª–æ—Ç—ã –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ</li>
              <li>‚ùå –û—Ç–º–µ–Ω–∏—Ç –≤—Å–µ—Ö –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π</li>
            </ul>
            <p className="modal-description">
              –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –∞—É–∫—Ü–∏–æ–Ω–∞!
            </p>
            <div className="modal-actions">
              <button
                className="btn btn-danger btn-large"
                onClick={handleResetAuction}
                disabled={resetting}
              >
                {resetting ? "‚è≥ –°–±—Ä–∞—Å—ã–≤–∞—é..." : "üîÑ –°–ë–†–û–°–ò–¢–¨ –ê–£–ö–¶–ò–û–ù"}
              </button>
              <button
                className="btn btn-secondary"
                onClick={() => setShowResetModal(false)}
                disabled={resetting}
              >
                –û—Ç–º–µ–Ω–∞
              </button>
            </div>
          </div>
        </div>
      )}

      {/* –ú–æ–¥–∞–ª –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è */}
      {showWinnerModal && (
        <div className="winner-modal">
          <div className="modal-content">
            <h3>üì¢ –¢–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤</h3>
            <p className="modal-description">
              –ó–∞—á–∏—Ç–∞–π—Ç–µ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –≥–æ—Å—Ç—è–º –∏–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –ø–æ –∂–µ–ª–∞–Ω–∏—é:
            </p>
            <textarea
              value={winnerMessage}
              onChange={(e) => setWinnerMessage(e.target.value)}
              rows={8}
            />
            <div className="modal-actions">
              <button
                className="btn btn-primary btn-large"
                onClick={handleAnnounceWinner}
              >
                ‚úÖ –ì–æ—Ç–æ–≤–æ
              </button>
              <button
                className="btn btn-secondary"
                onClick={() => setShowWinnerModal(false)}
              >
                –û—Ç–º–µ–Ω–∞
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default AuctionTab;
