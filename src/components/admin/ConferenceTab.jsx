import React, { useState, useEffect } from 'react';

const ConferenceTab = ({ adminToken }) => {
  const [currentPhase, setCurrentPhase] = useState('lobby');
  const [rounds, setRounds] = useState([]);
  const [loading, setLoading] = useState(true);
  const [updating, setUpdating] = useState(false);
  const [showFullResetModal, setShowFullResetModal] = useState(false);
  const [resettingFull, setResettingFull] = useState(false);
  const [confirmReset, setConfirmReset] = useState(false); // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —á–µ–∫–±–æ–∫—Å–∞

  const phaseLabels = {
    lobby: '–õ–æ–±–±–∏',
    quiz: '–ö–≤–∏–∑',
    logic: '–ì–¥–µ –ª–æ–≥–∏–∫–∞?',
    survey: '100 –∫ 1',
    auction: '–ê—É–∫—Ü–∏–æ–Ω'
  };

  useEffect(() => {
    fetchGameState();
    fetchRounds();
  }, []);

  const fetchGameState = async () => {
    try {
      console.log('Fetching game state...');
      const response = await fetch(`/api/admin?action=status&token=${adminToken}`);
      if (response.ok) {
        const data = await response.json();
        console.log('Game state received:', data);
        setCurrentPhase(data.currentPhase || 'lobby');
      } else {
        console.error('Failed to fetch game state:', response.status);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è:', error);
    }
  };

  const fetchRounds = async () => {
    try {
      const response = await fetch(`/api/admin?action=rounds&token=${adminToken}`);
      if (response.ok) {
        const data = await response.json();
        setRounds(data);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—É–Ω–¥–æ–≤:', error);
    }
    setLoading(false);
  };

  const updateCurrentPhase = async (newPhase) => {
    if (updating) return;
    
    setUpdating(true);
    try {
      console.log('Updating phase to:', newPhase);
      const response = await fetch('/api/admin', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          action: 'updatePhase',
          phase: newPhase,
          token: adminToken
        })
      });
      
      if (response.ok) {
        const result = await response.json();
        console.log('Phase update result:', result);
        setCurrentPhase(newPhase);
        alert(`‚úÖ –§–∞–∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: ${phaseLabels[newPhase]}`);
      } else {
        const error = await response.text();
        console.error('Phase update failed:', error);
        alert('‚ùå –û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã —Ñ–∞–∑—ã');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã —Ñ–∞–∑—ã:', error);
      alert('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
    }
    setUpdating(false);
  };

  const handleFullReset = async () => {
    if (resettingFull) return;
    
    setResettingFull(true);
    try {
      const response = await fetch('/api/admin', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          action: 'full_reset',
          token: adminToken
        })
      });

      if (response.ok) {
        const result = await response.json();
        alert(`‚úÖ ${result.message}\n\nüìä –ß—Ç–æ –±—ã–ª–æ —Å–±—Ä–æ—à–µ–Ω–æ:\n‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É–¥–∞–ª–µ–Ω–æ: ${result.stats.users_deleted}\n‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–≥—Ä —É–¥–∞–ª–µ–Ω–æ: ${result.stats.results_deleted}\n‚Ä¢ –ê—É–∫—Ü–∏–æ–Ω–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫ —É–¥–∞–ª–µ–Ω–æ: ${result.stats.auction_bids_deleted}\n‚Ä¢ –ö–æ–º–∞–Ω–¥ —É–¥–∞–ª–µ–Ω–æ: ${result.stats.teams_deleted}\n‚Ä¢ –§–∞–∑–∞ —Å–±—Ä–æ—à–µ–Ω–∞: ${result.stats.game_phase_reset}\n‚Ä¢ –†–∞—É–Ω–¥—ã –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã\n‚Ä¢ ${result.stats.questions_preserved}`);
        setShowFullResetModal(false);
        setConfirmReset(false); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —á–µ–∫–±–æ–∫—Å
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        fetchGameState();
        fetchRounds();
      } else {
        const error = await response.json();
        alert(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞: ${error.error}`);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞ –∏–≥—Ä—ã:', error);
      alert('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
    }
    setResettingFull(false);
  };

  const startRound = async (roundId) => {
    if (updating) return;
    
    setUpdating(true);
    try {
      const response = await fetch('/api/admin', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          action: 'start_round',
          round_id: roundId,
          token: adminToken
        })
      });
      
      if (response.ok) {
        alert('‚úÖ –†–∞—É–Ω–¥ –∑–∞–ø—É—â–µ–Ω!');
        fetchRounds();
      } else {
        alert('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ä–∞—É–Ω–¥–∞');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ä–∞—É–Ω–¥–∞:', error);
      alert('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
    }
    setUpdating(false);
  };

  const stopRound = async (roundId) => {
    if (updating) return;
    
    setUpdating(true);
    try {
      const response = await fetch('/api/admin', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          action: 'stop_round',
          round_id: roundId,
          token: adminToken
        })
      });
      
      if (response.ok) {
        alert('‚úÖ –†–∞—É–Ω–¥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!');
        fetchRounds();
      } else {
        alert('‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–∞—É–Ω–¥–∞');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–∞—É–Ω–¥–∞:', error);
      alert('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
    }
    setUpdating(false);
  };

  if (loading) {
    return <div className="loading">–ó–∞–≥—Ä—É–∑–∫–∞...</div>;
  }

  return (
    <div className="conference-tab">
      <div className="conference-header">
        <h2>üé™ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–µ–π</h2>
        <div className="header-controls">
          <button 
            className="btn btn-danger"
            onClick={() => setShowFullResetModal(true)}
            title="–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –Ω–æ–≤–æ–º—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é"
          >
            üí• –°–ë–†–û–° –î–õ–Ø –ù–û–í–û–ì–û –°–û–ë–´–¢–ò–Ø
          </button>
          <button 
            className="btn btn-secondary" 
            onClick={fetchGameState}
            disabled={updating}
          >
            üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å
          </button>
        </div>
      </div>

      {/* –ë—ã—Å—Ç—Ä–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ñ–∞–∑ */}
      <div className="quick-phase-control">
        <h3>‚ö° –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ñ–∞–∑</h3>
        <div className="phase-buttons">
          {Object.keys(phaseLabels).map(phase => (
            <button
              key={phase}
              className={`phase-btn ${currentPhase === phase ? 'active' : ''}`}
              onClick={() => updateCurrentPhase(phase)}
              disabled={updating}
            >
              {updating ? '‚è≥' : phaseLabels[phase]}
              {currentPhase === phase && <span className="current-indicator">‚óè</span>}
            </button>
          ))}
        </div>
        <p className="phase-hint">
          –¢–µ–∫—É—â–∞—è —Ñ–∞–∑–∞: <strong>{phaseLabels[currentPhase] || currentPhase}</strong>
        </p>
      </div>

      {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—É–Ω–¥–∞–º–∏ */}
      <div className="rounds-management">
        <h3>üéÆ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—É–Ω–¥–∞–º–∏</h3>
        <div className="rounds-list">
          {rounds.map(round => (
            <div key={round.id} className="round-item">
              <div className="round-info">
                <div className="round-title">{round.title}</div>
                <div className="round-meta">
                  <span className="round-type">{round.round_type}</span>
                  <span className="round-questions">
                    üìù –í–æ–ø—Ä–æ—Å–æ–≤: {round.quiz_count || round.logic_count || round.survey_count || 0}
                  </span>
                  <span className={`round-status ${round.is_active ? 'active' : 'inactive'}`}>
                    {round.is_active ? 'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' : 'üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}
                  </span>
                </div>
              </div>
              
              <div className="round-controls">
                {round.is_active ? (
                  <button 
                    className="btn btn-warning"
                    onClick={() => stopRound(round.id)}
                    disabled={updating}
                  >
                    ‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
                  </button>
                ) : (
                  <button 
                    className="btn btn-success"
                    onClick={() => startRound(round.id)}
                    disabled={updating}
                  >
                    ‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å
                  </button>
                )}
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* –ú–æ–¥–∞–ª —Å–±—Ä–æ—Å–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è */}
      {showFullResetModal && (
        <div className="winner-modal">
          <div className="modal-content">
            <h3>üí• –ü–û–î–ì–û–¢–û–í–ö–ê –ö –ù–û–í–û–ú–£ –°–û–ë–´–¢–ò–Æ</h3>
            <p className="modal-description danger">
              ‚ö†Ô∏è <strong>–ü–û–î–ì–û–¢–û–í–ö–ê –ö –ù–û–í–û–ú–£ –ú–ï–†–û–ü–†–ò–Ø–¢–ò–Æ!</strong>
            </p>
            <p className="modal-description">
              –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç —Å–∏—Å—Ç–µ–º—É –∫ –Ω–æ–≤–æ–º—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é:
            </p>
            <ul className="reset-info-list">
              <li>üóëÔ∏è –£–¥–∞–ª–∏—Ç –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–±—ã—Ç–∏—è</li>
              <li>üìä –û—á–∏—Å—Ç–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ—à–ª—ã—Ö –∏–≥—Ä</li>
              <li>üí∞ –£–¥–∞–ª–∏—Ç –≤—Å–µ –∞—É–∫—Ü–∏–æ–Ω–Ω—ã–µ —Å—Ç–∞–≤–∫–∏</li>
              <li>üë• –û—á–∏—Å—Ç–∏—Ç –∫–æ–º–∞–Ω–¥—ã (–Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ)</li>
              <li>ÔøΩÔøΩ –°–±—Ä–æ—Å–∏—Ç —Ñ–∞–∑—É –∏–≥—Ä—ã –Ω–∞ "–õ–æ–±–±–∏"</li>
              <li>‚èπÔ∏è –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –≤—Å–µ —Ä–∞—É–Ω–¥—ã</li>
            </ul>
            <div className="preserve-notice">
              <strong>‚úÖ –°–û–•–†–ê–ù–Ø–ï–¢–°–Ø:</strong>
              <ul>
                <li>‚ùì –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –∫–≤–∏–∑–æ–≤</li>
                <li>üñºÔ∏è –ö–∞—Ä—Ç–∏–Ω–∫–∏ –¥–ª—è "–ì–¥–µ –ª–æ–≥–∏–∫–∞?"</li>
                <li>üìã –í–æ–ø—Ä–æ—Å—ã –¥–ª—è "100 –∫ 1"</li>
                <li>üèõÔ∏è –õ–æ—Ç—ã –∞—É–∫—Ü–∏–æ–Ω–∞</li>
                <li>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã</li>
              </ul>
            </div>
            
            <div className="danger-confirmation">
              <label className="danger-checkbox">
                <input 
                  type="checkbox" 
                  checked={confirmReset}
                  onChange={(e) => setConfirmReset(e.target.checked)}
                />
                <span>–î–∞, –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –∫ –Ω–æ–≤–æ–º—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é</span>
              </label>
            </div>
            
            <div className="modal-actions">
              <button 
                className="btn btn-danger btn-large"
                onClick={handleFullReset}
                disabled={resettingFull || !confirmReset}
              >
                {resettingFull ? '‚è≥ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é...' : 'üí• –ü–û–î–ì–û–¢–û–í–ò–¢–¨ –ö –ù–û–í–û–ú–£ –°–û–ë–´–¢–ò–Æ'}
              </button>
              <button 
                className="btn btn-secondary"
                onClick={() => {
                  setShowFullResetModal(false);
                  setConfirmReset(false); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —á–µ–∫–±–æ–∫—Å –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
                }}
                disabled={resettingFull}
              >
                –û—Ç–º–µ–Ω–∞
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default ConferenceTab;
