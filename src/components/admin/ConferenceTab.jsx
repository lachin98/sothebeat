import React, { useState, useEffect } from 'react';

const ConferenceTab = ({ adminToken }) => {
  const [currentPhase, setCurrentPhase] = useState('lobby');
  const [phases, setPhases] = useState({
    quiz: false,
    logic: false,
    contact: false,
    survey: false,
    auction: false
  });
  const [rounds, setRounds] = useState([]);
  const [loading, setLoading] = useState(true);
  const [updating, setUpdating] = useState(false);

  const phaseLabels = {
    lobby: '–õ–æ–±–±–∏',
    quiz: '–ö–≤–∏–∑',
    logic: '–ì–¥–µ –ª–æ–≥–∏–∫–∞?',
    contact: '–ï—Å—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç!',
    survey: '100 –∫ 1',
    auction: '–ê—É–∫—Ü–∏–æ–Ω'
  };

  useEffect(() => {
    fetchGameState();
    fetchRounds();
    
    // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
    const interval = setInterval(fetchGameState, 5000);
    return () => clearInterval(interval);
  }, []);

  const fetchGameState = async () => {
    try {
      const response = await fetch(`/api/admin?action=status&token=${adminToken}`);
      if (response.ok) {
        const data = await response.json();
        setCurrentPhase(data.currentPhase || 'lobby');
        setPhases(data.phases || {});
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è:', error);
    }
  };

  const fetchRounds = async () => {
    try {
      const response = await fetch(`/api/admin?action=rounds&token=${adminToken}`);
      if (response.ok) {
        const data = await response.json();
        setRounds(data);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—É–Ω–¥–æ–≤:', error);
    }
    setLoading(false);
  };

  const updateCurrentPhase = async (newPhase) => {
    if (updating) return;
    
    setUpdating(true);
    try {
      const response = await fetch('/api/admin', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          action: 'updatePhase',
          phase: newPhase,
          token: adminToken
        })
      });
      
      if (response.ok) {
        setCurrentPhase(newPhase);
        alert(`‚úÖ –§–∞–∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: ${phaseLabels[newPhase]}`);
        
        // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        setTimeout(fetchGameState, 500);
      } else {
        alert('‚ùå –û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã —Ñ–∞–∑—ã');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã —Ñ–∞–∑—ã:', error);
      alert('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
    }
    setUpdating(false);
  };

  const togglePhase = async (phaseName) => {
    if (updating) return;
    
    setUpdating(true);
    try {
      const response = await fetch('/api/admin', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          action: 'togglePhase',
          phase: phaseName,
          token: adminToken
        })
      });
      
      if (response.ok) {
        const newPhases = {
          ...phases,
          [phaseName]: !phases[phaseName]
        };
        setPhases(newPhases);
        alert(`‚úÖ –§–∞–∑–∞ "${phaseLabels[phaseName]}" ${phases[phaseName] ? '–æ—Ç–∫–ª—é—á–µ–Ω–∞' : '–≤–∫–ª—é—á–µ–Ω–∞'}`);
        
        // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        setTimeout(fetchGameState, 500);
      } else {
        alert('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ñ–∞–∑—ã');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ñ–∞–∑—ã:', error);
      alert('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
    }
    setUpdating(false);
  };

  const startRound = async (roundId) => {
    if (updating) return;
    
    setUpdating(true);
    try {
      const response = await fetch('/api/admin', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          action: 'start_round',
          round_id: roundId,
          token: adminToken
        })
      });
      
      if (response.ok) {
        alert('‚úÖ –†–∞—É–Ω–¥ –∑–∞–ø—É—â–µ–Ω!');
        fetchRounds();
      } else {
        alert('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ä–∞—É–Ω–¥–∞');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ä–∞—É–Ω–¥–∞:', error);
      alert('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
    }
    setUpdating(false);
  };

  const stopRound = async (roundId) => {
    if (updating) return;
    
    setUpdating(true);
    try {
      const response = await fetch('/api/admin', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          action: 'stop_round',
          round_id: roundId,
          token: adminToken
        })
      });
      
      if (response.ok) {
        alert('‚úÖ –†–∞—É–Ω–¥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!');
        fetchRounds();
      } else {
        alert('‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–∞—É–Ω–¥–∞');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–∞—É–Ω–¥–∞:', error);
      alert('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
    }
    setUpdating(false);
  };

  const openHallScreen = () => {
    const hallUrl = `/hall-screen?token=${adminToken}`;
    window.open(hallUrl, '_blank', 'width=1200,height=800');
  };

  if (loading) {
    return <div className="loading">–ó–∞–≥—Ä—É–∑–∫–∞...</div>;
  }

  return (
    <div className="conference-tab">
      <div className="conference-header">
        <h2>üé™ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–µ–π</h2>
        <div className="live-indicator">
          üü¢ LIVE - –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫
        </div>
      </div>

      {/* –ë—ã—Å—Ç—Ä–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ñ–∞–∑ */}
      <div className="quick-phase-control">
        <h3>‚ö° –ë—ã—Å—Ç—Ä–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ñ–∞–∑</h3>
        <div className="phase-buttons">
          {Object.keys(phaseLabels).map(phase => (
            <button
              key={phase}
              className={`phase-btn ${currentPhase === phase ? 'active' : ''}`}
              onClick={() => updateCurrentPhase(phase)}
              disabled={updating}
            >
              {phaseLabels[phase]}
              {currentPhase === phase && <span className="current-indicator">‚óè</span>}
            </button>
          ))}
        </div>
      </div>

      {/* –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ */}
      <div className="current-state">
        <h3>üìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ</h3>
        <div className="state-info">
          <div className="state-item">
            <span className="state-label">–¢–µ–∫—É—â–∞—è —Ñ–∞–∑–∞:</span>
            <span className={`state-value phase-${currentPhase}`}>
              {phaseLabels[currentPhase] || currentPhase}
            </span>
          </div>
          <div className="state-item">
            <span className="state-label">–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:</span>
            <span className="state-value">
              {new Date().toLocaleTimeString()}
            </span>
          </div>
        </div>
      </div>

      {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—É–Ω–¥–∞–º–∏ */}
      <div className="rounds-management">
        <h3>üéÆ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—É–Ω–¥–∞–º–∏</h3>
        <div className="rounds-list">
          {rounds.map(round => (
            <div key={round.id} className="round-item">
              <div className="round-info">
                <div className="round-title">{round.title}</div>
                <div className="round-meta">
                  <span className="round-type">{round.round_type}</span>
                  <span className="round-questions">
                    üìù –í–æ–ø—Ä–æ—Å–æ–≤: {round.quiz_count || round.logic_count || round.survey_count || 0}
                  </span>
                  <span className={`round-status ${round.is_active ? 'active' : 'inactive'}`}>
                    {round.is_active ? 'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' : 'üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}
                  </span>
                </div>
              </div>
              
              <div className="round-controls">
                {round.is_active ? (
                  <button 
                    className="btn btn-warning"
                    onClick={() => stopRound(round.id)}
                    disabled={updating}
                  >
                    ‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
                  </button>
                ) : (
                  <button 
                    className="btn btn-success"
                    onClick={() => startRound(round.id)}
                    disabled={updating}
                  >
                    ‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å
                  </button>
                )}
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* –î–µ—Ç–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∞–∑ */}
      <div className="phase-management">
        <h3>‚öôÔ∏è –î–µ—Ç–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∞–∑</h3>
        
        <div className="phase-controls">
          <h4>üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–∑—ã:</h4>
          {Object.entries(phases).map(([phase, isActive]) => (
            <label key={phase} className="phase-checkbox">
              <input
                type="checkbox"
                checked={isActive}
                onChange={() => togglePhase(phase)}
                disabled={updating}
              />
              <span className={`phase-status ${isActive ? 'enabled' : 'disabled'}`}>
                {isActive ? '‚úÖ' : '‚ùå'}
              </span>
              <span className="phase-label">{phaseLabels[phase]}</span>
            </label>
          ))}
        </div>

        <div className="control-buttons">
          <button 
            className="btn btn-secondary" 
            onClick={fetchGameState}
            disabled={updating}
          >
            üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
          </button>
          <button 
            className="btn btn-primary" 
            onClick={openHallScreen}
          >
            üì∫ –û—Ç–∫—Ä—ã—Ç—å —ç–∫—Ä–∞–Ω –∑–∞–ª–∞
          </button>
        </div>
      </div>
    </div>
  );
};

export default ConferenceTab;
