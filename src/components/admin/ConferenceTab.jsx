import React, { useState, useEffect } from 'react';

const ConferenceTab = ({ adminToken }) => {
  const [currentPhase, setCurrentPhase] = useState('lobby');
  const [phases, setPhases] = useState({
    quiz: false,
    logic: false,
    contact: false,
    survey: false,
    auction: false
  });
  const [rounds, setRounds] = useState([]);

  const phaseLabels = {
    quiz: '–ö–≤–∏–∑',
    logic: '–ì–¥–µ –ª–æ–≥–∏–∫–∞?',
    contact: '–ï—Å—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç!',
    survey: '100 –∫ 1',
    auction: '–ê—É–∫—Ü–∏–æ–Ω'
  };

  useEffect(() => {
    fetchGameState();
    fetchRounds();
  }, []);

  const fetchGameState = async () => {
    try {
      const response = await fetch(`/api/admin?action=status&token=${adminToken}`);
      if (response.ok) {
        const data = await response.json();
        setCurrentPhase(data.currentPhase);
        setPhases(data.phases);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è:', error);
    }
  };

  const fetchRounds = async () => {
    try {
      const response = await fetch(`/api/admin?action=rounds&token=${adminToken}`);
      if (response.ok) {
        const data = await response.json();
        setRounds(data);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—É–Ω–¥–æ–≤:', error);
    }
  };

  const togglePhase = async (phaseName) => {
    try {
      await fetch('/api/admin', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          action: 'togglePhase',
          phase: phaseName,
          token: adminToken
        })
      });
      
      setPhases(prev => ({
        ...prev,
        [phaseName]: !prev[phaseName]
      }));
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ñ–∞–∑—ã:', error);
    }
  };

  const startRound = async (roundId) => {
    try {
      await fetch('/api/admin', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          action: 'start_round',
          round_id: roundId,
          token: adminToken
        })
      });
      alert('–†–∞—É–Ω–¥ –∑–∞–ø—É—â–µ–Ω!');
      fetchRounds();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ä–∞—É–Ω–¥–∞:', error);
    }
  };

  const stopRound = async (roundId) => {
    try {
      await fetch('/api/admin', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          action: 'stop_round',
          round_id: roundId,
          token: adminToken
        })
      });
      alert('–†–∞—É–Ω–¥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!');
      fetchRounds();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–∞—É–Ω–¥–∞:', error);
    }
  };

  const saveSettings = async () => {
    alert('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!');
  };

  const openHallScreen = () => {
    window.open('/hall-screen', '_blank');
  };

  return (
    <div className="conference-tab">
      <div className="conference-header">
        <h2>üé™ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–µ–π</h2>
      </div>

      <div className="rounds-management">
        <h3>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—É–Ω–¥–∞–º–∏</h3>
        <div className="rounds-list">
          {rounds.map(round => (
            <div key={round.id} className="round-item">
              <div className="round-info">
                <div className="round-title">{round.title}</div>
                <div className="round-meta">
                  <span className="round-type">{round.round_type}</span>
                  <span className="round-questions">
                    –í–æ–ø—Ä–æ—Å–æ–≤: {round.quiz_count || round.logic_count || round.survey_count || 0}
                  </span>
                  <span className={`round-status ${round.is_active ? 'active' : 'inactive'}`}>
                    {round.is_active ? 'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' : 'üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}
                  </span>
                </div>
              </div>
              
              <div className="round-controls">
                {round.is_active ? (
                  <button 
                    className="btn btn-warning"
                    onClick={() => stopRound(round.id)}
                  >
                    ‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
                  </button>
                ) : (
                  <button 
                    className="btn btn-success"
                    onClick={() => startRound(round.id)}
                  >
                    ‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å
                  </button>
                )}
              </div>
            </div>
          ))}
        </div>
      </div>

      <div className="phase-management">
        <h3>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–∑–∞–º–∏</h3>
        
        <div className="phase-selector">
          <label>–¢–µ–∫—É—â–∞—è —Ñ–∞–∑–∞:</label>
          <select 
            value={currentPhase} 
            onChange={(e) => setCurrentPhase(e.target.value)}
          >
            <option value="lobby">lobby</option>
            <option value="quiz">quiz</option>
            <option value="logic">logic</option>
            <option value="contact">contact</option>
            <option value="survey">survey</option>
            <option value="auction">auction</option>
          </select>
        </div>

        <div className="phase-controls">
          <h4>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–∑—ã:</h4>
          {Object.entries(phases).map(([phase, isActive]) => (
            <label key={phase} className="phase-checkbox">
              <input
                type="checkbox"
                checked={isActive}
                onChange={() => togglePhase(phase)}
              />
              <span className={`phase-status ${isActive ? 'enabled' : 'disabled'}`}>
                {isActive ? '‚úÖ' : '‚ùå'}
              </span>
              {phaseLabels[phase]}
            </label>
          ))}
        </div>

        <div className="control-buttons">
          <button className="btn btn-secondary">–ó–∞–≥—Ä—É–∑–∏—Ç—å</button>
          <button className="btn btn-primary" onClick={saveSettings}>
            –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
          </button>
          <button className="btn btn-primary" onClick={openHallScreen}>
            üì∫ –û—Ç–∫—Ä—ã—Ç—å —ç–∫—Ä–∞–Ω –∑–∞–ª–∞
          </button>
        </div>
      </div>
    </div>
  );
};

export default ConferenceTab;
