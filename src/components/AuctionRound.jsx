import React, { useState, useEffect } from "react";
import firstImg from "../images/1.jpg";
import secondImg from "../images/2.jpg";
import thirdImg from "../images/3.jpg";
import fourthImg from "../images/4.jpg";
import fifthImg from "../images/5.jpg";
import sixImg from "../images/6.jpg";
import seventhImg from "../images/7.jpg";

const imagesByOrder = {
  1: seventhImg, // –∫–∞–∫ —É —Ç–µ–±—è –≤ –∏—Å—Ö–æ–¥–Ω–∏–∫–µ
  2: sixImg,
  3: firstImg,
  4: secondImg,
  5: thirdImg,
  6: fourthImg,
  7: fifthImg,
};

const AuctionRound = ({ userId, userPoints, userName, onBack }) => {
  const [activeLot, setActiveLot] = useState(null);
  const [bidAmount, setBidAmount] = useState("");
  const [loading, setLoading] = useState(true);
  const [placingBid, setPlacingBid] = useState(false);
  const [currentUserPoints, setCurrentUserPoints] = useState(userPoints);

  // –∏–Ω–ª–∞–π–Ω-–æ–±—ä—è–≤–ª–µ–Ω–∏–µ
  const [announcedLotId, setAnnouncedLotId] = useState(null);
  const [winnerBanner, setWinnerBanner] = useState(null); // { lot_id, lot_title, user_name, bid_amount } | null

  useEffect(() => {
    setCurrentUserPoints(userPoints);
    fetchActiveLot();
    const interval = setInterval(fetchActiveLot, 2000);
    return () => clearInterval(interval);
  }, [userPoints]);

  const fetchActiveLot = async () => {
    try {
      const response = await fetch("/api/auction?action=active");
      if (response.ok) {
        const data = await response.json();
        const newActiveLot = data.lot;

        // –µ—Å–ª–∏ –±—ã–ª –∞–∫—Ç–∏–≤–Ω—ã–π –ª–æ—Ç –∏ –æ–Ω –ø—Ä–æ–ø–∞–ª -> –∑–∞–≤–µ—Ä—à–∏–ª—Å—è -> —É–∑–Ω–∞—ë–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –æ–¥–∏–Ω —Ä–∞–∑
        if (!newActiveLot && activeLot && activeLot.is_active) {
          await checkForWinner(activeLot.id);
        }

        // –µ—Å–ª–∏ –∞—É–∫—Ü–∏–æ–Ω —Å–Ω–æ–≤–∞ –∞–∫—Ç–∏–≤–µ–Ω ‚Äî —Å–∫—Ä—ã–≤–∞–µ–º –±–∞–Ω–Ω–µ—Ä –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        if (newActiveLot) {
          setWinnerBanner(null);
        }

        setActiveLot(newActiveLot);
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ—Ç–∞:", error);
    }
    setLoading(false);
  };

  const checkForWinner = async (lotId) => {
    try {
      const response = await fetch("/api/auction?action=lots");
      if (!response.ok) return;
      const lots = await response.json();
      const completedLot = lots.find((lot) => lot.id === lotId && lot.is_completed);
      if (!completedLot) return;

      // –µ—Å–ª–∏ —É–∂–µ –ø–æ–∫–∞–∑—ã–≤–∞–ª–∏ –±–∞–Ω–Ω–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ –ª–æ—Ç–∞ ‚Äî –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º
      if (completedLot.id === announcedLotId) return;

      if (completedLot.winner_name) {
        setWinnerBanner({
          lot_id: completedLot.id,
          lot_title: completedLot.title,
          user_name: completedLot.winner_name,
          bid_amount: completedLot.current_price,
         user_id: completedLot.winner_user_id
           ?? completedLot.winner_id
           ?? completedLot.user_id
           ?? null,
        });
        setAnnouncedLotId(completedLot.id);
      } else {
        // –ª–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –±–µ–∑ —Å—Ç–∞–≤–æ–∫
        setWinnerBanner({
          lot_id: completedLot.id,
          lot_title: completedLot.title,
          user_name: null,
          bid_amount: null,
          user_id: null,
        });
        setAnnouncedLotId(completedLot.id);
      }
    } catch (e) {
      console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è:", e);
    }
  };

  const fetchUserBalance = async () => {
    if (!userId) return;
    try {
      const response = await fetch(`/api/users?action=profile&user_id=${userId}`);
      if (response.ok) {
        const userData = await response.json();
        setCurrentUserPoints(userData.total_points || 0);
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:", error);
    }
  };

  const handlePlaceBid = async () => {
    if (!bidAmount || placingBid) return;
    const amount = parseInt(bidAmount, 10);
    if (Number.isNaN(amount) || amount <= 0) {
      alert("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É");
      return;
    }
    if (amount > currentUserPoints) {
      alert(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤!\n–£ –≤–∞—Å: ${currentUserPoints.toLocaleString()} –±–∞–ª–ª–æ–≤`);
      return;
    }

    setPlacingBid(true);
    try {
      const response = await fetch("/api/auction", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          action: "place_bid",
          user_id: userId,
          user_name: userName || "–£—á–∞—Å—Ç–Ω–∏–∫",
          lot_id: activeLot.id,
          bid_amount: amount,
        }),
      });

      if (response.ok) {
        const result = await response.json();
        setBidAmount("");
        setCurrentUserPoints((prev) => prev - amount);
        alert(`‚úÖ –°—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!\n${result.message}\n\n–í–∞—à –±–∞–ª–∞–Ω—Å: ${(currentUserPoints - amount).toLocaleString()} –±–∞–ª–ª–æ–≤`);
        fetchActiveLot();
        fetchUserBalance();
      } else {
        const error = await response.json();
        alert(`‚ùå ${error.error}`);
        fetchUserBalance();
      }
    } catch (e) {
      console.error("–û—à–∏–±–∫–∞ —Å—Ç–∞–≤–∫–∏:", e);
      alert("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏");
      fetchUserBalance();
    }
    setPlacingBid(false);
  };

  const getMinBid = () => {
    if (!activeLot) return 200;
    return Math.max((activeLot.current_price ?? 0) + 10, activeLot.starting_price);
  };

  const getQuickBidOptions = () => {
    const minBid = getMinBid();
    const options = [minBid, minBid + 50, minBid + 100, minBid + 200];
    return options.filter((amount) => amount <= currentUserPoints);
  };

  if (loading) {
    return (
      <div className="auction-loading">
        <button className="back-btn" onClick={onBack}>‚Üê –ù–∞–∑–∞–¥</button>
        <div className="loading-screen">
          <div className="spinner"></div>
          <p>–ó–∞–≥—Ä—É–∑–∫–∞ –∞—É–∫—Ü–∏–æ–Ω–∞...</p>
        </div>
      </div>
    );
  }

  if (!activeLot) {
    return (
      <div className="auction-waiting">
        <button className="back-btn" onClick={onBack}>‚Üê –ù–∞–∑–∞–¥</button>

        {/* –ò–Ω–ª–∞–π–Ω-–æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è, –µ—Å–ª–∏ —Ç–æ–ª—å–∫–æ —á—Ç–æ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –ª–æ—Ç */}
        {winnerBanner && (
          <div className="winner-banner">
            {winnerBanner.user_name ? (
              <>
                <div className="wb-title">üèÜ –õ–æ—Ç ¬´{winnerBanner.lot_title}¬ª –ø—Ä–æ–¥–∞–Ω</div>
                <div className="wb-line">–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: <strong>{winnerBanner.user_name}</strong></div>
                {winnerBanner.user_id != null && (
                <div className="wb-line">ID –ø–æ–±–µ–¥–∏—Ç–µ–ª—è: <code>{winnerBanner.user_id}</code></div>
       )}
                <div className="wb-line">–ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞: <strong>{winnerBanner.bid_amount?.toLocaleString()} –±–∞–ª–ª–æ–≤</strong></div>
              </>
            ) : (
              <>
                <div className="wb-title">‚ÑπÔ∏è –õ–æ—Ç ¬´{winnerBanner.lot_title}¬ª —Å–Ω—è—Ç —Å —Ç–æ—Ä–≥–æ–≤</div>
                <div className="wb-line">–°—Ç–∞–≤–æ–∫ –Ω–µ –±—ã–ª–æ</div>
              </>
            )}
          </div>
        )}

        <div className="waiting-content">
          <div className="auction-logo">üèõÔ∏è</div>
          <h2>–ê—É–∫—Ü–∏–æ–Ω SotheBEAT</h2>
          <p>–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤</p>
          <p>–î–æ–∂–¥–∏—Ç–µ—Å—å –Ω–∞—á–∞–ª–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ª–æ—Ç–∞!</p>

          <div className="user-balance">
            üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: <strong>{currentUserPoints.toLocaleString()} –±–∞–ª–ª–æ–≤</strong>
          </div>

          <div className="auction-info">
            <h4>‚ÑπÔ∏è –ö–∞–∫ –ø—Ä–æ—Ö–æ–¥—è—Ç —Ç–æ—Ä–≥–∏:</h4>
            <ul>
              <li>–í–µ–¥—É—â–∏–π –æ–±—ä—è–≤–ª—è–µ—Ç –ª–æ—Ç</li>
              <li>–í—ã –¥–µ–ª–∞–µ—Ç–µ —Å—Ç–∞–≤–∫–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏</li>
              <li>–ë–∞–ª–ª—ã —Å–ø–∏—Å—ã–≤–∞—é—Ç—Å—è —Å—Ä–∞–∑—É –ø—Ä–∏ —Å—Ç–∞–≤–∫–µ</li>
              <li>–ï—Å–ª–∏ –Ω–µ –≤—ã–∏–≥—Ä–∞–ª–∏ ‚Äî –±–∞–ª–ª—ã –≤–µ—Ä–Ω—É—Ç—Å—è</li>
              <li>–í–µ–¥—É—â–∏–π –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ç–æ—Ä–≥–∏ –∏ –æ–±—ä—è–≤–ª—è–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—è</li>
            </ul>
          </div>
        </div>
      </div>
    );
  }

  const minBid = getMinBid();
  const quickBidOptions = getQuickBidOptions();

  return (
    <div className="auction-round">
      <div className="auction-header">
        <button className="back-btn" onClick={onBack}>‚Üê –ù–∞–∑–∞–¥</button>
        <h2>üèõÔ∏è –ê—É–∫—Ü–∏–æ–Ω</h2>
      </div>

      <div className="auction-content">
        <div className="lot-display">
          <div className="lot-image">
            <img src={imagesByOrder[activeLot.order_num] || ""} alt={activeLot.title} />
          </div>
          <div className="lot-info">
            <h3 className="lot-title">{activeLot.title}</h3>
            <p className="lot-description">{activeLot.description}</p>

            <div className="price-display">
              <div className="price-row">
                <span className="price-label">–°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞:</span>
                <span className="price-value">{activeLot.starting_price.toLocaleString()}</span>
              </div>
              <div className="price-row current">
                <span className="price-label">–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:</span>
                <span className="price-value highlight">{(activeLot.current_price || activeLot.starting_price).toLocaleString()}</span>
              </div>
              {activeLot.leading_bidder && (
                <div className="leader-info">üëë –õ–∏–¥–∏—Ä—É–µ—Ç: <strong>{activeLot.leading_bidder}</strong></div>
              )}
            </div>
          </div>
        </div>

        <div className="auction-status">
          <div className="status-indicator active">üî• –¢–û–†–ì–ò –ò–î–£–¢</div>
          <div className="bid-count">–°—Ç–∞–≤–æ–∫: {activeLot.bid_count}</div>
        </div>

        <div className="bid-section">
          <div className="current-balance">
            üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: <strong>{currentUserPoints.toLocaleString()}</strong> –±–∞–ª–ª–æ–≤
          </div>

          <div className="bid-form">
            <div className="bid-input-container">
              <div className="bid-input-group">
                <input
                  type="number"
                  value={bidAmount}
                  onChange={(e) => setBidAmount(e.target.value)}
                  placeholder={`–ú–∏–Ω. —Å—Ç–∞–≤–∫–∞: ${minBid.toLocaleString()}`}
                  min={minBid}
                  max={currentUserPoints}
                  disabled={placingBid}
                  className="bid-input"
                />
                <span className="currency">–±–∞–ª–ª–æ–≤</span>
              </div>
              <button
                className="bid-button"
                onClick={handlePlaceBid}
                disabled={placingBid || !bidAmount || parseInt(bidAmount,10) < minBid || parseInt(bidAmount,10) > currentUserPoints}
              >
                {placingBid ? "‚è≥ –î–µ–ª–∞—é —Å—Ç–∞–≤–∫—É..." : "üî• –°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É"}
              </button>
            </div>

            {getQuickBidOptions().length > 0 && (
              <div className="quick-bids">
                <div className="quick-bids-label">–ë—ã—Å—Ç—Ä—ã–µ —Å—Ç–∞–≤–∫–∏:</div>
                <div className="quick-bids-buttons">
                  {getQuickBidOptions().map((amount, i) => (
                    <button key={i} className="quick-bid" onClick={() => setBidAmount(amount.toString())} disabled={placingBid}>
                      {amount.toLocaleString()}
                    </button>
                  ))}
                </div>
              </div>
            )}

            <div className="bid-warnings">
              {currentUserPoints < minBid && (
                <div className="warning insufficient">‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤ –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ç–æ—Ä–≥–∞—Ö</div>
              )}
              <div className="info">üí° –ë–∞–ª–ª—ã —Å–ø–∏—Å—ã–≤–∞—é—Ç—Å—è —Å—Ä–∞–∑—É –ø—Ä–∏ —Å—Ç–∞–≤–∫–µ. –ï—Å–ª–∏ –Ω–µ –≤—ã–∏–≥—Ä–∞–µ—Ç–µ ‚Äî –≤–µ—Ä–Ω—É—Ç—Å—è.</div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default AuctionRound;
