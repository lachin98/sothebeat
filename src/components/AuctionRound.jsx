import React, { useState, useEffect } from 'react';

const AuctionRound = ({ userId, userPoints, teamId, onBack }) => {
  const [activeLot, setActiveLot] = useState(null);
  const [timeLeft, setTimeLeft] = useState(0);
  const [bids, setBids] = useState([]);
  const [bidAmount, setBidAmount] = useState('');
  const [loading, setLoading] = useState(true);
  const [placingBid, setPlacingBid] = useState(false);
  const [userName] = useState('–£—á–∞—Å—Ç–Ω–∏–∫');

  useEffect(() => {
    fetchActiveLot();
    const interval = setInterval(fetchActiveLot, 1000); // –ö–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
    return () => clearInterval(interval);
  }, []);

  const fetchActiveLot = async () => {
    try {
      const response = await fetch('/api/auction?action=active');
      if (response.ok) {
        const data = await response.json();
        setActiveLot(data.lot);
        setTimeLeft(data.timeLeft || 0);
        
        if (data.lot) {
          fetchBids(data.lot.id);
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ—Ç–∞:', error);
    }
    setLoading(false);
  };

  const fetchBids = async (lotId) => {
    try {
      const response = await fetch(`/api/auction?action=bids&lot_id=${lotId}`);
      if (response.ok) {
        const data = await response.json();
        setBids(data);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞–≤–æ–∫:', error);
    }
  };

  const handlePlaceBid = async () => {
    if (!bidAmount || placingBid) return;
    
    const amount = parseInt(bidAmount);
    if (amount <= 0) {
      alert('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É');
      return;
    }
    
    if (amount > userPoints) {
      alert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤!');
      return;
    }
    
    setPlacingBid(true);
    
    try {
      const response = await fetch('/api/auction', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          action: 'place_bid',
          user_id: userId,
          user_name: userName,
          lot_id: activeLot.id,
          bid_amount: amount,
          team_id: teamId
        })
      });
      
      if (response.ok) {
        setBidAmount('');
        alert('‚úÖ –°—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!');
        fetchActiveLot(); // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
      } else {
        const error = await response.json();
        alert(`‚ùå ${error.error}`);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å—Ç–∞–≤–∫–∏:', error);
      alert('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
    }
    
    setPlacingBid(false);
  };

  const formatTime = (seconds) => {
    if (seconds <= 0) return '–ó–∞–≤–µ—Ä—à–µ–Ω';
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  };

  const getMinBid = () => {
    if (!activeLot) return 200;
    return Math.max(activeLot.current_price + 10, activeLot.starting_price);
  };

  if (loading) {
    return (
      <div className="auction-loading">
        <button className="back-btn" onClick={onBack}>‚Üê –ù–∞–∑–∞–¥</button>
        <div className="loading-screen">
          <div className="spinner"></div>
          <p>–ó–∞–≥—Ä—É–∑–∫–∞ –∞—É–∫—Ü–∏–æ–Ω–∞...</p>
        </div>
      </div>
    );
  }

  if (!activeLot) {
    return (
      <div className="auction-waiting">
        <button className="back-btn" onClick={onBack}>‚Üê –ù–∞–∑–∞–¥</button>
        
        <div className="waiting-content">
          <div className="auction-logo">üèõÔ∏è</div>
          <h2>–ê—É–∫—Ü–∏–æ–Ω SotheBEAT</h2>
          <p>–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ—Ç–æ–≤</p>
          <p>–î–æ–∂–¥–∏—Ç–µ—Å—å –Ω–∞—á–∞–ª–∞ —Ç–æ—Ä–≥–æ–≤!</p>
          
          <div className="user-balance">
            üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: <strong>{userPoints} –±–∞–ª–ª–æ–≤</strong>
          </div>
          
          {teamId && (
            <div className="team-info">
              üë• –ö–æ–º–∞–Ω–¥–∞: {teamId}
            </div>
          )}
        </div>
      </div>
    );
  }

  const isTimeUp = timeLeft <= 0;
  const minBid = getMinBid();

  return (
    <div className="auction-round">
      <div className="auction-header">
        <button className="back-btn" onClick={onBack}>‚Üê –ù–∞–∑–∞–¥</button>
        <h2>üèõÔ∏è –ê—É–∫—Ü–∏–æ–Ω</h2>
      </div>

      <div className="auction-content">
        {/* –õ–æ—Ç */}
        <div className="lot-display">
          <div className="lot-image">
            <img src={activeLot.image_url} alt={activeLot.title} />
          </div>
          
          <div className="lot-info">
            <h3 className="lot-title">{activeLot.title}</h3>
            <p className="lot-description">{activeLot.description}</p>
            
            <div className="lot-details">
              <div className="price-info">
                <span className="label">–°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞:</span>
                <span className="value">{activeLot.starting_price} –±–∞–ª–ª–æ–≤</span>
              </div>
              
              <div className="current-price">
                <span className="label">–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:</span>
                <span className="value">{activeLot.current_price || activeLot.starting_price} –±–∞–ª–ª–æ–≤</span>
              </div>
              
              {activeLot.leading_bidder && (
                <div className="leading-bidder">
                  <span className="label">–õ–∏–¥–∏—Ä—É–µ—Ç:</span>
                  <span className="value">{activeLot.leading_bidder}</span>
                </div>
              )}
            </div>
          </div>
        </div>

        {/* –¢–∞–π–º–µ—Ä */}
        <div className={`auction-timer ${isTimeUp ? 'expired' : ''} ${timeLeft <= 10 ? 'urgent' : ''}`}>
          <div className="timer-label">–í—Ä–µ–º—è –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è:</div>
          <div className="timer-value">{formatTime(timeLeft)}</div>
        </div>

        {/* –§–æ—Ä–º–∞ —Å—Ç–∞–≤–∫–∏ */}
        {!isTimeUp && (
          <div className="bid-section">
            <div className="user-info">
              <div className="balance">üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: <strong>{userPoints}</strong> –±–∞–ª–ª–æ–≤</div>
              {teamId && <div className="team">üë• –ö–æ–º–∞–Ω–¥–∞: {teamId}</div>}
            </div>
            
            <div className="bid-form">
              <div className="bid-input-group">
                <input
                  type="number"
                  value={bidAmount}
                  onChange={(e) => setBidAmount(e.target.value)}
                  placeholder={`–ú–∏–Ω. —Å—Ç–∞–≤–∫–∞: ${minBid}`}
                  min={minBid}
                  max={userPoints}
                  disabled={placingBid}
                />
                <span className="currency">–±–∞–ª–ª–æ–≤</span>
              </div>
              
              <button 
                className="bid-button"
                onClick={handlePlaceBid}
                disabled={placingBid || !bidAmount || parseInt(bidAmount) < minBid}
              >
                {placingBid ? '‚è≥ –°—Ç–∞–≤–∫–∞...' : 'üî• –°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É'}
              </button>
            </div>
            
            <div className="bid-hints">
              <button 
                className="quick-bid"
                onClick={() => setBidAmount(minBid.toString())}
                disabled={minBid > userPoints}
              >
                {minBid} –±–∞–ª–ª–æ–≤ (–º–∏–Ω.)
              </button>
              <button 
                className="quick-bid"
                onClick={() => setBidAmount((minBid + 50).toString())}
                disabled={minBid + 50 > userPoints}
              >
                {minBid + 50} –±–∞–ª–ª–æ–≤
              </button>
              <button 
                className="quick-bid"
                onClick={() => setBidAmount((minBid + 100).toString())}
                disabled={minBid + 100 > userPoints}
              >
                {minBid + 100} –±–∞–ª–ª–æ–≤
              </button>
            </div>
          </div>
        )}

        {/* –ò—Å—Ç–æ—Ä–∏—è —Å—Ç–∞–≤–æ–∫ */}
        <div className="bids-history">
          <h4>–ò—Å—Ç–æ—Ä–∏—è —Å—Ç–∞–≤–æ–∫</h4>
          {bids.length === 0 ? (
            <p className="no-bids">–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –¥–µ–ª–∞–ª —Å—Ç–∞–≤–æ–∫</p>
          ) : (
            <div className="bids-list">
              {bids.map((bid, index) => (
                <div key={bid.id} className={`bid-item ${index === 0 ? 'leading' : ''}`}>
                  <div className="bid-user">
                    {index === 0 && <span className="crown">üëë</span>}
                    {bid.user_name}
                    {bid.team_id && <span className="team-badge">üë•</span>}
                  </div>
                  <div className="bid-amount">{bid.bid_amount} –±–∞–ª–ª–æ–≤</div>
                  <div className="bid-time">
                    {new Date(bid.created_at).toLocaleTimeString()}
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>

        {isTimeUp && (
          <div className="auction-ended">
            <h3>üéâ –¢–æ—Ä–≥–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!</h3>
            {activeLot.leading_bidder ? (
              <p>–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: <strong>{activeLot.leading_bidder}</strong></p>
            ) : (
              <p>–ù–∏–∫—Ç–æ –Ω–µ —Å–¥–µ–ª–∞–ª —Å—Ç–∞–≤–∫—É</p>
            )}
          </div>
        )}
      </div>
    </div>
  );
};

export default AuctionRound;
