import React, { useState, useEffect } from 'react';
import AuctionWinnerAnnouncement from './AuctionWinnerAnnouncement';

const AuctionRound = ({ userId, userPoints, userName, onBack }) => {
  const [activeLot, setActiveLot] = useState(null);
  const [bidAmount, setBidAmount] = useState('');
  const [loading, setLoading] = useState(true);
  const [placingBid, setPlacingBid] = useState(false);
  const [currentUserPoints, setCurrentUserPoints] = useState(userPoints);
  const [lastCompletedLot, setLastCompletedLot] = useState(null);
  const [showWinnerAnnouncement, setShowWinnerAnnouncement] = useState(false);
  const [winnerData, setWinnerData] = useState(null);

  useEffect(() => {
    setCurrentUserPoints(userPoints);
    fetchActiveLot();
    const interval = setInterval(fetchActiveLot, 2000);
    return () => clearInterval(interval);
  }, [userPoints]);

  const fetchActiveLot = async () => {
    try {
      const response = await fetch('/api/auction?action=active');
      if (response.ok) {
        const data = await response.json();
        const newActiveLot = data.lot;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–º–µ–Ω—É –ª–æ—Ç–∞ - –µ—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–≤–µ—Ä—à–∏–ª—Å—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if (!newActiveLot && activeLot && activeLot.is_active) {
          // –õ–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è - –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ
          checkForWinner(activeLot.id);
        }
        
        setActiveLot(newActiveLot);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ—Ç–∞:', error);
    }
    setLoading(false);
  };

  const checkForWinner = async (lotId) => {
    try {
      const response = await fetch('/api/auction?action=lots');
      if (response.ok) {
        const lots = await response.json();
        const completedLot = lots.find(lot => lot.id === lotId && lot.is_completed);
        
        if (completedLot && completedLot.winner_name) {
          setWinnerData({
            lot_title: completedLot.title,
            user_name: completedLot.winner_name,
            bid_amount: completedLot.current_price
          });
          setShowWinnerAnnouncement(true);
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ:', error);
    }
  };

  const fetchUserBalance = async () => {
    if (!userId) return;
    
    try {
      const response = await fetch(`/api/users?action=profile&user_id=${userId}`);
      if (response.ok) {
        const userData = await response.json();
        setCurrentUserPoints(userData.total_points || 0);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', error);
    }
  };

  const handlePlaceBid = async () => {
    if (!bidAmount || placingBid) return;
    
    const amount = parseInt(bidAmount);
    if (amount <= 0) {
      alert('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É');
      return;
    }
    
    if (amount > currentUserPoints) {
      alert(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤!\n–£ –≤–∞—Å: ${currentUserPoints.toLocaleString()} –±–∞–ª–ª–æ–≤`);
      return;
    }
    
    setPlacingBid(true);
    
    try {
      const response = await fetch('/api/auction', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          action: 'place_bid',
          user_id: userId,
          user_name: userName || '–£—á–∞—Å—Ç–Ω–∏–∫',
          lot_id: activeLot.id,
          bid_amount: amount
        })
      });
      
      if (response.ok) {
        const result = await response.json();
        setBidAmount('');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å—Ç–∞–≤–∫–∏
        setCurrentUserPoints(prev => prev - amount);
        
        alert(`‚úÖ –°—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!\n${result.message}\n\n–í–∞—à –±–∞–ª–∞–Ω—Å: ${(currentUserPoints - amount).toLocaleString()} –±–∞–ª–ª–æ–≤`);
        
        fetchActiveLot();
        fetchUserBalance(); // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
      } else {
        const error = await response.json();
        alert(`‚ùå ${error.error}`);
        fetchUserBalance(); // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –Ω–∞ —Å–ª—É—á–∞–π –∏–∑–º–µ–Ω–µ–Ω–∏–π
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å—Ç–∞–≤–∫–∏:', error);
      alert('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
      fetchUserBalance();
    }
    
    setPlacingBid(false);
  };

  const getMinBid = () => {
    if (!activeLot) return 200;
    return Math.max(activeLot.current_price + 10, activeLot.starting_price);
  };

  const getQuickBidOptions = () => {
    const minBid = getMinBid();
    const options = [
      minBid,
      minBid + 50,
      minBid + 100,
      minBid + 200
    ];
    
    return options.filter(amount => amount <= currentUserPoints);
  };

  if (loading) {
    return (
      <div className="auction-loading">
        <button className="back-btn" onClick={onBack}>‚Üê –ù–∞–∑–∞–¥</button>
        <div className="loading-screen">
          <div className="spinner"></div>
          <p>–ó–∞–≥—Ä—É–∑–∫–∞ –∞—É–∫—Ü–∏–æ–Ω–∞...</p>
        </div>
      </div>
    );
  }

  if (!activeLot) {
    return (
      <div className="auction-waiting">
        <button className="back-btn" onClick={onBack}>‚Üê –ù–∞–∑–∞–¥</button>
        
        <div className="waiting-content">
          <div className="auction-logo">üèõÔ∏è</div>
          <h2>–ê—É–∫—Ü–∏–æ–Ω SotheBEAT</h2>
          <p>–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤</p>
          <p>–î–æ–∂–¥–∏—Ç–µ—Å—å –Ω–∞—á–∞–ª–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ª–æ—Ç–∞!</p>
          
          <div className="user-balance">
            üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: <strong>{currentUserPoints.toLocaleString()} –±–∞–ª–ª–æ–≤</strong>
          </div>

          <div className="auction-info">
            <h4>‚ÑπÔ∏è –ö–∞–∫ –ø—Ä–æ—Ö–æ–¥—è—Ç —Ç–æ—Ä–≥–∏:</h4>
            <ul>
              <li>–í–µ–¥—É—â–∏–π –æ–±—ä—è–≤–ª—è–µ—Ç –ª–æ—Ç</li>
              <li>–í—ã –¥–µ–ª–∞–µ—Ç–µ —Å—Ç–∞–≤–∫–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏</li>
              <li>–ë–∞–ª–ª—ã —Å–ø–∏—Å—ã–≤–∞—é—Ç—Å—è —Å—Ä–∞–∑—É –ø—Ä–∏ —Å—Ç–∞–≤–∫–µ</li>
              <li>–ï—Å–ª–∏ –Ω–µ –≤—ã–∏–≥—Ä–∞–ª–∏ - –±–∞–ª–ª—ã –≤–µ—Ä–Ω—É—Ç—Å—è</li>
              <li>–í–µ–¥—É—â–∏–π –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ç–æ—Ä–≥–∏ –∏ –æ–±—ä—è–≤–ª—è–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—è</li>
            </ul>
          </div>
        </div>

        {/* –û–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è */}
        {showWinnerAnnouncement && (
          <AuctionWinnerAnnouncement
            winnerData={winnerData}
            onClose={() => {
              setShowWinnerAnnouncement(false);
              setWinnerData(null);
            }}
          />
        )}
      </div>
    );
  }

  const minBid = getMinBid();
  const quickBidOptions = getQuickBidOptions();

  return (
    <div className="auction-round">
      <div className="auction-header">
        <button className="back-btn" onClick={onBack}>‚Üê –ù–∞–∑–∞–¥</button>
        <h2>üèõÔ∏è –ê—É–∫—Ü–∏–æ–Ω</h2>
      </div>

      <div className="auction-content">
        {/* –õ–æ—Ç */}
        <div className="lot-display">
          <div className="lot-image">
            <img src={activeLot.image_url} alt={activeLot.title} />
          </div>
          
          <div className="lot-info">
            <h3 className="lot-title">{activeLot.title}</h3>
            <p className="lot-description">{activeLot.description}</p>
            
            <div className="price-display">
              <div className="price-row">
                <span className="price-label">–°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞:</span>
                <span className="price-value">{activeLot.starting_price.toLocaleString()}</span>
              </div>
              
              <div className="price-row current">
                <span className="price-label">–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:</span>
                <span className="price-value highlight">
                  {(activeLot.current_price || activeLot.starting_price).toLocaleString()}
                </span>
              </div>
              
              {activeLot.leading_bidder && (
                <div className="leader-info">
                  üëë –õ–∏–¥–∏—Ä—É–µ—Ç: <strong>{activeLot.leading_bidder}</strong>
                </div>
              )}
            </div>
          </div>
        </div>

        {/* –°—Ç–∞—Ç—É—Å —Ç–æ—Ä–≥–æ–≤ */}
        <div className="auction-status">
          <div className="status-indicator active">üî• –¢–û–†–ì–ò –ò–î–£–¢</div>
          <div className="bid-count">–°—Ç–∞–≤–æ–∫: {activeLot.bid_count}</div>
        </div>

        {/* –ü–æ–ª–µ –¥–ª—è —Å—Ç–∞–≤–∫–∏ */}
        <div className="bid-section">
          {/* –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –≤ —Å–µ–∫—Ü–∏–∏ —Å—Ç–∞–≤–∫–∏ */}
          <div className="current-balance">
            üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: <strong>{currentUserPoints.toLocaleString()}</strong> –±–∞–ª–ª–æ–≤
          </div>
          
          <div className="bid-form">
            <div className="bid-input-container">
              <div className="bid-input-group">
                <input
                  type="number"
                  value={bidAmount}
                  onChange={(e) => setBidAmount(e.target.value)}
                  placeholder={`–ú–∏–Ω. —Å—Ç–∞–≤–∫–∞: ${minBid.toLocaleString()}`}
                  min={minBid}
                  max={currentUserPoints}
                  disabled={placingBid}
                  className="bid-input"
                />
                <span className="currency">–±–∞–ª–ª–æ–≤</span>
              </div>
              
              <button 
                className="bid-button"
                onClick={handlePlaceBid}
                disabled={placingBid || !bidAmount || parseInt(bidAmount) < minBid || parseInt(bidAmount) > currentUserPoints}
              >
                {placingBid ? '‚è≥ –î–µ–ª–∞—é —Å—Ç–∞–≤–∫—É...' : 'üî• –°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É'}
              </button>
            </div>
            
            {/* –ë—ã—Å—Ç—Ä—ã–µ —Å—Ç–∞–≤–∫–∏ */}
            {quickBidOptions.length > 0 && (
              <div className="quick-bids">
                <div className="quick-bids-label">–ë—ã—Å—Ç—Ä—ã–µ —Å—Ç–∞–≤–∫–∏:</div>
                <div className="quick-bids-buttons">
                  {quickBidOptions.map((amount, index) => (
                    <button 
                      key={index}
                      className="quick-bid"
                      onClick={() => setBidAmount(amount.toString())}
                      disabled={placingBid}
                    >
                      {amount.toLocaleString()}
                    </button>
                  ))}
                </div>
              </div>
            )}
            
            {/* –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è */}
            <div className="bid-warnings">
              {currentUserPoints < minBid && (
                <div className="warning insufficient">
                  ‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤ –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ç–æ—Ä–≥–∞—Ö
                </div>
              )}
              
              <div className="info">
                üí° –ë–∞–ª–ª—ã —Å–ø–∏—Å—ã–≤–∞—é—Ç—Å—è —Å—Ä–∞–∑—É –ø—Ä–∏ —Å—Ç–∞–≤–∫–µ. –ï—Å–ª–∏ –Ω–µ –≤—ã–∏–≥—Ä–∞–µ—Ç–µ - –≤–µ—Ä–Ω—É—Ç—Å—è.
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* –û–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è */}
      {showWinnerAnnouncement && (
        <AuctionWinnerAnnouncement
          winnerData={winnerData}
          onClose={() => {
            setShowWinnerAnnouncement(false);
            setWinnerData(null);
          }}
        />
      )}
    </div>
  );
};

export default AuctionRound;
