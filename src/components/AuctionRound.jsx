import React, { useState } from 'react';

const AuctionRound = ({ lots, userPoints, onBack }) => {
  const [currentLot, setCurrentLot] = useState(0);
  const [bidAmount, setBidAmount] = useState('');
  const [userBids, setUserBids] = useState([]);
  const [teamCode, setTeamCode] = useState('');

  const handlePlaceBid = () => {
    const bid = parseInt(bidAmount);
    if (bid < lots[currentLot].startPrice) {
      alert(`–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: ${lots[currentLot].startPrice} –±–∞–ª–ª–æ–≤`);
      return;
    }
    if (bid > userPoints) {
      alert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤!');
      return;
    }

    const newBid = {
      lotId: lots[currentLot].id,
      amount: bid,
      timestamp: new Date(),
      teamCode: teamCode || null
    };

    setUserBids([...userBids, newBid]);
    alert(`–°—Ç–∞–≤–∫–∞ ${bid} –±–∞–ª–ª–æ–≤ —Ä–∞–∑–º–µ—â–µ–Ω–∞ –Ω–∞ –ª–æ—Ç "${lots[currentLot].name}"`);
    setBidAmount('');
  };

  const joinTeam = () => {
    const code = prompt('–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –±–∞–ª–ª–æ–≤:');
    if (code) {
      setTeamCode(code);
      alert(`–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ–º–∞–Ω–¥–µ: ${code}`);
    }
  };

  return (
    <div className="auction-round">
      <button className="back-btn" onClick={onBack}>‚Üê –ù–∞–∑–∞–¥</button>
      
      <div className="auction-header">
        <h2>üî• –ê—É–∫—Ü–∏–æ–Ω SotheBEAT</h2>
        <div className="user-balance">
          üí∞ –í–∞—à–∏ –±–∞–ª–ª—ã: {userPoints}
          {teamCode && <div className="team-info">üë• –ö–æ–º–∞–Ω–¥–∞: {teamCode}</div>}
        </div>
      </div>

      {!teamCode && (
        <button className="join-team-btn" onClick={joinTeam}>
          ü§ù –û–±—ä–µ–¥–∏–Ω–∏—Ç—å—Å—è –≤ –∫–æ–º–∞–Ω–¥—É
        </button>
      )}

      <div className="lots-navigation">
        {lots.map((lot, index) => (
          <button
            key={lot.id}
            className={`lot-nav-btn ${currentLot === index ? 'active' : ''}`}
            onClick={() => setCurrentLot(index)}
          >
            –õ–æ—Ç {lot.id}
          </button>
        ))}
      </div>

      <div className="current-lot">
        <div className="lot-card">
          <div className="lot-image">
            {lots[currentLot].image}
          </div>
          <div className="lot-info">
            <h3>–õ–æ—Ç {lots[currentLot].id}</h3>
            <h4>{lots[currentLot].name}</h4>
            <div className="start-price">
              –°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞: {lots[currentLot].startPrice} –±–∞–ª–ª–æ–≤
            </div>
          </div>
        </div>

        <div className="bidding-section">
          <div className="bid-input">
            <input
              type="number"
              value={bidAmount}
              onChange={(e) => setBidAmount(e.target.value)}
              placeholder="–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞"
              min={lots[currentLot].startPrice}
              max={userPoints}
            />
            <button 
              className="bid-btn"
              onClick={handlePlaceBid}
              disabled={!bidAmount || parseInt(bidAmount) < lots[currentLot].startPrice}
            >
              –°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É
            </button>
          </div>

          <div className="quick-bids">
            <h4>–ë—ã—Å—Ç—Ä—ã–µ —Å—Ç–∞–≤–∫–∏:</h4>
            {[200, 250, 300, 400, 500].map(amount => (
              <button
                key={amount}
                className="quick-bid-btn"
                onClick={() => setBidAmount(amount.toString())}
                disabled={amount > userPoints}
              >
                {amount}
              </button>
            ))}
          </div>
        </div>

        {userBids.length > 0 && (
          <div className="user-bids">
            <h4>–í–∞—à–∏ —Å—Ç–∞–≤–∫–∏:</h4>
            {userBids.map((bid, index) => {
              const lot = lots.find(l => l.id === bid.lotId);
              return (
                <div key={index} className="bid-item">
                  –õ–æ—Ç {bid.lotId} ({lot?.name}): {bid.amount} –±–∞–ª–ª–æ–≤
                  {bid.teamCode && <span className="team-bid"> (–∫–æ–º–∞–Ω–¥–∞: {bid.teamCode})</span>}
                </div>
              );
            })}
          </div>
        )}

        <div className="auction-info">
          <h4>‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞—É–∫—Ü–∏–æ–Ω–µ:</h4>
          <ul>
            <li>–°—Ç–∞–≤–∫–∏ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏</li>
            <li>–ú–æ–∂–Ω–æ –æ–±—ä–µ–¥–∏–Ω—è—Ç—å—Å—è –≤ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫</li>
            <li>–ü–æ–±–µ–¥–∏—Ç–µ–ª—å –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –≤ –∫–æ–Ω—Ü–µ –∞—É–∫—Ü–∏–æ–Ω–∞</li>
            <li>–ü—Ä–∏ –ø–æ–±–µ–¥–µ –±–∞–ª–ª—ã —Å–ø–∏—Å—ã–≤–∞—é—Ç—Å—è —Å –≤–∞—à–µ–≥–æ —Å—á–µ—Ç–∞</li>
          </ul>
        </div>
      </div>
    </div>
  );
};

export default AuctionRound;
