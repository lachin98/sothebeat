import React, { useState, useEffect } from 'react';
import ResultsScreen from './ResultsScreen';

const LogicRound = ({ userId, onComplete, onBack }) => {
  const [questions, setQuestions] = useState([]);
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [userAnswer, setUserAnswer] = useState('');
  const [answers, setAnswers] = useState([]);
  const [timeLeft, setTimeLeft] = useState(300);
  const [gameStarted, setGameStarted] = useState(false);
  const [gameCompleted, setGameCompleted] = useState(false);
  const [feedback, setFeedback] = useState('');
  const [loading, setLoading] = useState(true);
  const [startTime, setStartTime] = useState(null);
  const [totalTimeSpent, setTotalTimeSpent] = useState(0);

  useEffect(() => {
    fetchQuestions();
  }, []);

  useEffect(() => {
    if (!gameStarted || gameCompleted) return;
    
    const timer = setInterval(() => {
      setTimeLeft(prev => {
        if (prev <= 1) {
          finishGame();
          return 0;
        }
        return prev - 1;
      });
    }, 1000);

    return () => clearInterval(timer);
  }, [gameStarted, gameCompleted]);

  const fetchQuestions = async () => {
    try {
      const response = await fetch('/api/questions?action=logic');
      if (response.ok) {
        const data = await response.json();
        const formattedQuestions = data.map(q => ({
          id: q.id,
          images: Array.isArray(q.images) ? q.images : [],
          imageUrls: Array.isArray(q.image_urls) ? q.image_urls : [],
          useImages: q.use_images || false,
          question: q.question_text,
          answer: q.correct_answer,
          alternatives: Array.isArray(q.alternatives) ? q.alternatives : [q.alternatives].filter(Boolean),
          points: q.points || 15
        }));
        setQuestions(formattedQuestions);
      } else {
        setQuestions([
          {
            id: 1,
            images: ["üéØ", "‚ùì", "üì±", "‚ö†Ô∏è"],
            imageUrls: [],
            useImages: false,
            question: "–ß—Ç–æ –∑–∞ –ø—Ä–æ–±–ª–µ–º–∞? (—Ç–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å)",
            answer: "–æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏",
            alternatives: ["–æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏", "—Å–µ—Ç—å"],
            points: 15
          }
        ]);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤:', error);
      setQuestions([
        {
          id: 1,
          images: ["üåê", "‚ùå", "üì°", "üíª"],
          imageUrls: [],
          useImages: false,
          question: "–ß—Ç–æ –∑–∞ –ø—Ä–æ–±–ª–µ–º–∞? (–æ—à–∏–±–∫–∞ —Å–µ—Ç–∏)",
          answer: "–Ω–µ—Ç —Å–µ—Ç–∏",
          alternatives: ["–Ω–µ—Ç —Å–µ—Ç–∏", "–æ—à–∏–±–∫–∞"],
          points: 15
        }
      ]);
    }
    setLoading(false);
  };

  const formatTime = (seconds) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  };

  const checkAnswer = (userInput, correctAnswers) => {
    const normalizedInput = userInput.toLowerCase().trim();
    return correctAnswers.some(answer => {
      const normalizedAnswer = answer.toLowerCase().trim();
      return normalizedAnswer.includes(normalizedInput) || 
             normalizedInput.includes(normalizedAnswer) ||
             normalizedAnswer === normalizedInput;
    });
  };

  const handleSubmitAnswer = () => {
    const currentTime = Date.now();
    const questionTime = startTime ? (currentTime - startTime) / 1000 : 60;
    const isCorrect = checkAnswer(userAnswer, [questions[currentQuestion].answer, ...questions[currentQuestion].alternatives]);
    
    let points = 0;
    if (isCorrect) {
      const basePoints = questions[currentQuestion].points || 15;
      const timeBonus = Math.max(0, Math.floor((60 - Math.min(questionTime, 60)) / 6));
      points = basePoints + timeBonus;
    }

    const newAnswer = {
      questionId: questions[currentQuestion].id,
      userAnswer,
      correctAnswer: questions[currentQuestion].answer,
      isCorrect,
      points,
      timeSpent: questionTime
    };

    const newAnswers = [...answers, newAnswer];
    setAnswers(newAnswers);
    
    if (isCorrect) {
      setFeedback(`‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! +${points} –±–∞–ª–ª–æ–≤`);
    } else {
      setFeedback(`‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ${questions[currentQuestion].answer}`);
    }

    setTimeout(() => {
      setFeedback('');
      setUserAnswer('');
      setStartTime(Date.now());
      
      if (currentQuestion < questions.length - 1) {
        setCurrentQuestion(currentQuestion + 1);
      } else {
        const totalTime = 300 - timeLeft;
        setTotalTimeSpent(totalTime);
        setGameCompleted(true);
      }
    }, 2000);
  };

  const finishGame = () => {
    const totalTime = 300 - timeLeft;
    setTotalTimeSpent(totalTime);
    setGameCompleted(true);
  };

  const handleResultsContinue = () => {
    const totalPoints = answers.reduce((sum, answer) => sum + answer.points, 0);
    onComplete(totalPoints, answers);
  };

  const startGame = () => {
    setGameStarted(true);
    setStartTime(Date.now());
  };

  if (loading) {
    return (
      <div className="logic-intro">
        <button className="back-btn" onClick={onBack}>‚Üê –ù–∞–∑–∞–¥</button>
        <div className="loading-screen">
          <div className="spinner"></div>
          <p>–ó–∞–≥—Ä—É–∑–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤...</p>
        </div>
      </div>
    );
  }

  if (gameCompleted) {
    const totalPoints = answers.reduce((sum, answer) => sum + answer.points, 0);
    return (
      <ResultsScreen
        roundType="logic"
        earnedPoints={totalPoints}
        answers={answers}
        totalQuestions={questions.length}
        timeSpent={totalTimeSpent}
        onContinue={handleResultsContinue}
      />
    );
  }

  if (!gameStarted) {
    return (
      <div className="logic-intro">
        <button className="back-btn" onClick={onBack}>‚Üê –ù–∞–∑–∞–¥</button>
        
        <div className="intro-content">
          <h2>üß© –ì–¥–µ –ª–æ–≥–∏–∫–∞?</h2>
          <h3>–£–≥–∞–¥–∞–π, —á—Ç–æ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫–∏!</h3>
          
          <div className="game-rules">
            <h4>–ü—Ä–∞–≤–∏–ª–∞:</h4>
            <ul>
              <li>–°–º–æ—Ç—Ä–∏ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏ —É–≥–∞–¥—ã–≤–∞–π —Å–≤—è–∑—å</li>
              <li>5 –º–∏–Ω—É—Ç –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã</li>
              <li>15 –±–∞–ª–ª–æ–≤ –∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç</li>
            </ul>
          </div>
          
          <div className="example">
            <h4>–ü—Ä–∏–º–µ—Ä:</h4>
            <div className="example-images">
              üå¥ üåÖ üçç üç∏
            </div>
            <p>–û—Ç–≤–µ—Ç: pina colada</p>
          </div>
          
          <button className="start-game-btn" onClick={startGame}>
            üöÄ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É!
          </button>
        </div>
      </div>
    );
  }

  const progress = ((currentQuestion) / questions.length) * 100;
  const currentQ = questions[currentQuestion];

  return (
    <div className="logic-round">
      <div className="logic-header">
        <div className="timer">‚è±Ô∏è {formatTime(timeLeft)}</div>
        <div className="progress">
          <div className="progress-bar" style={{ width: `${progress}%` }}></div>
          <span className="progress-text">{currentQuestion + 1}/{questions.length}</span>
        </div>
      </div>

      <div className="logic-question-container">
        <div className="images-grid">
          {currentQ.useImages && currentQ.imageUrls.length > 0 ? (
            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏
            currentQ.imageUrls.map((url, index) => (
              <div key={index} className="image-card">
                {url ? (
                  <img src={url} alt={`–ö–∞—Ä—Ç–∏–Ω–∫–∞ ${index + 1}`} className="logic-image" />
                ) : (
                  <div className="image-placeholder">‚ùì</div>
                )}
              </div>
            ))
          ) : (
            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —ç–º–æ–¥–∑–∏/—Ç–µ–∫—Å—Ç
            currentQ.images.map((image, index) => (
              <div key={index} className="image-card">
                <div className="image-placeholder">
                  {image}
                </div>
              </div>
            ))
          )}
        </div>

        <h3 className="logic-question-text">
          {currentQ.question}
        </h3>

        {feedback && (
          <div className={`feedback ${feedback.includes('‚úÖ') ? 'correct' : 'incorrect'}`}>
            {feedback}
          </div>
        )}

        <div className="logic-answer-input">
          <input
            type="text"
            value={userAnswer}
            onChange={(e) => setUserAnswer(e.target.value)}
            placeholder="–í–≤–µ–¥–∏ –æ—Ç–≤–µ—Ç –ª–∞—Ç–∏–Ω—Å–∫–∏–º–∏ –±—É–∫–≤–∞–º–∏..."
            onKeyPress={(e) => e.key === 'Enter' && userAnswer.trim() && !feedback && handleSubmitAnswer()}
            disabled={feedback !== ''}
          />
          <button
            className="logic-submit-btn"
            onClick={handleSubmitAnswer}
            disabled={!userAnswer.trim() || feedback !== ''}
          >
            –û—Ç–≤–µ—Ç–∏—Ç—å
          </button>
        </div>
      </div>
    </div>
  );
};

export default LogicRound;
