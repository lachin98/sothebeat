import React, { useState, useEffect } from "react";
import { useGamePhase } from "../hooks/useGamePhase";
import { useUserPoints } from "../hooks/useUserPoints";
import QuizRound from "../components/QuizRound";
import LogicRound from "../components/LogicRound";
import SurveyRound from "../components/SurveyRound";
import AuctionRound from "../components/AuctionRound";

const HomePage = ({ user }) => {
  const [currentView, setCurrentView] = useState("lobby");
  const [userName, setUserName] = useState("–£—á–∞—Å—Ç–Ω–∏–∫");
  const [userId, setUserId] = useState(null);
  const [loading, setLoading] = useState(true);
  const [isTelegramUser, setIsTelegramUser] = useState(false);
  const [completedRounds, setCompletedRounds] = useState([]);
  const [initialPoints, setInitialPoints] = useState(0);

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö—É–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ñ–∞–∑—ã –∏–≥—Ä—ã
  const {
    currentPhase,
    phases,
    isLoading: phaseLoading,
    lastUpdate,
  } = useGamePhase();

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö—É–∫ –¥–ª—è live –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤
  const { userPoints, isUpdating, updatePoints, refreshPoints } = useUserPoints(
    userId,
    initialPoints,
    isTelegramUser
  );

  useEffect(() => {
    if (user && user.id) {
      setUserName(user.first_name || user.username || "–£—á–∞—Å—Ç–Ω–∏–∫");
      setUserId(user.id);

      const isTgUser = user.id < 999999999999;
      setIsTelegramUser(isTgUser);

      if (isTgUser) {
        fetchUserProfile(user.id);
      } else {
        const savedPoints =
          localStorage.getItem(`sothebeat_points_${user.id}`) || "0";
        const savedCompleted = localStorage.getItem(
          `sothebeat_completed_${user.id}`
        );
        const points = parseInt(savedPoints);
        setInitialPoints(points);
        setCompletedRounds(savedCompleted ? JSON.parse(savedCompleted) : []);
        setLoading(false);
      }
    } else {
      const guestId = Date.now();
      setUserName("–ì–æ—Å—Ç—å");
      setUserId(guestId);
      setIsTelegramUser(false);
      setInitialPoints(0);
      setCompletedRounds([]);
      setLoading(false);
    }
  }, [user]);

  const fetchUserProfile = async (uid) => {
    try {
      const response = await fetch(`/api/users?action=profile&user_id=${uid}`);
      if (response.ok) {
        const userData = await response.json();
        const points = userData.total_points || 0;
        setInitialPoints(points);

        // –ü–æ–ª—É—á–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ä–∞—É–Ω–¥—ã
        const resultsResponse = await fetch(
          `/api/results?action=user_results&user_id=${uid}`
        );
        if (resultsResponse.ok) {
          const results = await resultsResponse.json();
          const completed = results.map((r) => r.round_type);
          setCompletedRounds(completed);
        }
      } else {
        setInitialPoints(0);
        setCompletedRounds([]);
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:", error);
      setInitialPoints(0);
      setCompletedRounds([]);
    }
    setLoading(false);
  };

  const handleRoundComplete = async (
    roundNumber,
    earnedPoints,
    roundType,
    answers
  ) => {
    if (!userId) return;

    const newTotal = userPoints + earnedPoints;
    updatePoints(newTotal);

    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—É–Ω–¥ –∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º
    const newCompleted = [...completedRounds, roundType];
    setCompletedRounds(newCompleted);

    if (isTelegramUser) {
      try {
        await fetch("/api/results", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            action: "save_round_result",
            user_id: userId,
            round_id: roundNumber,
            round_type: roundType,
            points_earned: earnedPoints,
            total_time: 300,
            answers: answers,
          }),
        });

        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–ª—ã –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        setTimeout(() => refreshPoints(), 1000);
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î:", error);
        localStorage.setItem(`sothebeat_points_${userId}`, newTotal.toString());
        localStorage.setItem(
          `sothebeat_completed_${userId}`,
          JSON.stringify(newCompleted)
        );
      }
    } else {
      localStorage.setItem(`sothebeat_points_${userId}`, newTotal.toString());
      localStorage.setItem(
        `sothebeat_completed_${userId}`,
        JSON.stringify(newCompleted)
      );
    }

    setCurrentView("lobby");
  };

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–≥—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–π —Ñ–∞–∑—ã
  const isGameAvailable = (gameType) => {
    if (currentPhase === gameType) return true; // –ê–∫—Ç–∏–≤–Ω–∞—è —Ñ–∞–∑–∞
    return phases[gameType] || false; // –ò–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–∞—è —Ñ–∞–∑–∞
  };

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç—å –∏–≥—Ä
  const isGameCompleted = (gameType) => {
    return completedRounds.includes(gameType);
  };

  const handleGameStart = (gameType, viewName) => {
    if (isGameCompleted(gameType)) {
      alert(
        `üéØ –í—ã —É–∂–µ –ø—Ä–æ—à–ª–∏ —ç—Ç–æ—Ç —Ä–∞—É–Ω–¥!\n\n–í—ã –ø–æ–ª—É—á–∏–ª–∏ –∑–∞ –Ω–µ–≥–æ –±–∞–ª–ª—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ.\n–í—Å–µ–≥–æ —Ä–∞—É–Ω–¥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: ${completedRounds.length}/3`
      );
      return;
    }

    if (isGameAvailable(gameType)) {
      setCurrentView(viewName);
    }
  };

  const getPhaseStatus = () => {
    switch (currentPhase) {
      case "lobby":
        return { emoji: "üè†", text: "–û–∂–∏–¥–∞–Ω–∏–µ", color: "#FFC72C" };
      case "quiz":
        return { emoji: "üéØ", text: "–ö–≤–∏–∑ –∞–∫—Ç–∏–≤–µ–Ω", color: "#FFC72C" };
      case "logic":
        return { emoji: "üß©", text: "–ì–¥–µ –ª–æ–≥–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞", color: "#FFC72C" };
      case "survey":
        return { emoji: "üìä", text: "100 –∫ 1 –∞–∫—Ç–∏–≤–µ–Ω", color: "#FFC72C" };
      case "auction":
        return { emoji: "üî•", text: "–ê—É–∫—Ü–∏–æ–Ω –∏–¥–µ—Ç", color: "#FFC72C" };
      default:
        return { emoji: "‚ùì", text: currentPhase, color: "#FFC72C" };
    }
  };

  if (loading) {
    return (
      <div className="mobile-loading">
        <div className="spinner"></div>
        <p>–ó–∞–≥—Ä—É–∑–∫–∞...</p>
      </div>
    );
  }

  const renderCurrentView = () => {
    switch (currentView) {
      case "quiz":
        return (
          <QuizRound
            userId={userId}
            onComplete={(points, answers) =>
              handleRoundComplete(1, points, "quiz", answers)
            }
            onBack={() => setCurrentView("lobby")}
          />
        );
      case "logic":
        return (
          <LogicRound
            userId={userId}
            onComplete={(points, answers) =>
              handleRoundComplete(2, points, "logic", answers)
            }
            onBack={() => setCurrentView("lobby")}
          />
        );
      case "survey":
        return (
          <SurveyRound
            userId={userId}
            onComplete={(points, answers) =>
              handleRoundComplete(3, points, "survey", answers)
            }
            onBack={() => setCurrentView("lobby")}
          />
        );
      case "auction":
        return (
          <AuctionRound
            userId={userId}
            userPoints={userPoints}
            userName={userName}
            onBack={() => {
              setCurrentView("lobby");
              // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–ª—ã –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∏–∑ –∞—É–∫—Ü–∏–æ–Ω–∞
              setTimeout(() => refreshPoints(), 500);
            }}
          />
        );
      default:
        return (
          <div className="mobile-lobby">
            {/* –õ–æ–≥–æ—Ç–∏–ø */}
            <div className="mobile-header">
              <div className="main-logo">
                <img
                  //src="https://www.pernod-ricard.com/themes/custom/pr2021_front/assets/images/logo50/logo-white-50.svg"
                  src="https://mystc.kz/_ASSETS/Images/Logos/mainPage1.svg"
                  alt="Pernod Ricard"
                  className="pernod-logo"
                  onError={(e) => {
                    // Fallback –µ—Å–ª–∏ –ª–æ–≥–æ—Ç–∏–ø –Ω–µ –∑–∞–≥—Ä—É–∑–∏—Ç—Å—è
                    e.target.src =
                      "https://via.placeholder.com/200x80/ffffff/000000?text=PERNOD+RICARD";
                  }}
                />
              </div>
            </div>

            {/* –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */}
            <div className="mobile-user-card">
              <div className="user-avatar">
                {userName.charAt(0).toUpperCase()}
              </div>
              <div className="user-info">
                <h3>
                  {userName} <span className="user-id">({userId})</span>
                </h3>
                <div className="user-type">
                  {isTelegramUser ? "üì± Telegram" : "üåê –í–µ–±"}
                </div>
                {completedRounds.length > 0 && (
                  <div className="completed-rounds">
                    ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {completedRounds.length}/3 —Ä–∞—É–Ω–¥–æ–≤
                  </div>
                )}
              </div>

              <div className="user-points">
                <div className="points-label">
                  –ë–∞–ª–ª—ã{" "}
                  {isUpdating && <span className="updating-indicator">üîÑ</span>}
                </div>
                <div className={`points-value ${isUpdating ? "updating" : ""}`}>
                  {userPoints.toLocaleString()}
                </div>
              </div>
            </div>

            {/* –°—Ç–∞—Ç—É—Å –∏–≥—Ä—ã */}
            <div
              className="game-status-card"
              style={{ borderColor: getPhaseStatus().color }}
            >
              <div className="status-icon">{getPhaseStatus().emoji}</div>
              <div className="status-info">
                <div className="status-text">{getPhaseStatus().text}</div>
                <div className="last-update">
                  üü¢ Live {lastUpdate && `(${lastUpdate})`}
                </div>
              </div>
            </div>

            {/* –ò–≥—Ä—ã */}
            <div className="mobile-games">
              <div className="games-grid">
                <button
                  className={`game-btn quiz-btn ${
                    !isGameAvailable("quiz") ? "disabled" : ""
                  } ${isGameCompleted("quiz") ? "completed" : ""}`}
                  onClick={() => handleGameStart("quiz", "quiz")}
                  disabled={!isGameAvailable("quiz")}
                >
                  <div className="game-icon">üéØ</div>
                  <div className="game-title">–ö–≤–∏–∑</div>
                  <div className="game-subtitle">Ballantine's</div>
                  <div className="game-points">–¥–æ 200 –±–∞–ª–ª–æ–≤</div>
                  {isGameCompleted("quiz") && (
                    <div className="completed-indicator">–ü–†–û–ô–î–ï–ù–û</div>
                  )}
                  {currentPhase === "quiz" && !isGameCompleted("quiz") && (
                    <div className="active-indicator">–ê–ö–¢–ò–í–ù–û</div>
                  )}
                  {!isGameAvailable("quiz") && !isGameCompleted("quiz") && (
                    <div className="disabled-indicator">–ù–ï–î–û–°–¢–£–ü–ù–û</div>
                  )}
                </button>

                <button
                  className={`game-btn logic-btn ${
                    !isGameAvailable("logic") ? "disabled" : ""
                  } ${isGameCompleted("logic") ? "completed" : ""}`}
                  onClick={() => handleGameStart("logic", "logic")}
                  disabled={!isGameAvailable("logic")}
                >
                  <div className="game-icon">üß©</div>
                  <div className="game-title">–ì–¥–µ –ª–æ–≥–∏–∫–∞?</div>
                  <div className="game-subtitle">–£–≥–∞–¥–∞–π —Å–≤—è–∑—å</div>
                  <div className="game-points">–¥–æ 200 –±–∞–ª–ª–æ–≤</div>
                  {isGameCompleted("logic") && (
                    <div className="completed-indicator">–ü–†–û–ô–î–ï–ù–û</div>
                  )}
                  {currentPhase === "logic" && !isGameCompleted("logic") && (
                    <div className="active-indicator">–ê–ö–¢–ò–í–ù–û</div>
                  )}
                  {!isGameAvailable("logic") && !isGameCompleted("logic") && (
                    <div className="disabled-indicator">–ù–ï–î–û–°–¢–£–ü–ù–û</div>
                  )}
                </button>

                <button
                  className={`game-btn survey-btn ${
                    !isGameAvailable("survey") ? "disabled" : ""
                  } ${isGameCompleted("survey") ? "completed" : ""}`}
                  onClick={() => handleGameStart("survey", "survey")}
                  disabled={!isGameAvailable("survey")}
                >
                  <div className="game-icon">üìä</div>
                  <div className="game-title">100 –∫ 1</div>
                  <div className="game-subtitle">–ú–Ω–µ–Ω–∏–µ –±–∞—Ä–º–µ–Ω–æ–≤</div>
                  <div className="game-points">–¥–æ 200 –±–∞–ª–ª–æ–≤</div>
                  {isGameCompleted("survey") && (
                    <div className="completed-indicator">–ü–†–û–ô–î–ï–ù–û</div>
                  )}
                  {currentPhase === "survey" && !isGameCompleted("survey") && (
                    <div className="active-indicator">–ê–ö–¢–ò–í–ù–û</div>
                  )}
                  {!isGameAvailable("survey") && !isGameCompleted("survey") && (
                    <div className="disabled-indicator">–ù–ï–î–û–°–¢–£–ü–ù–û</div>
                  )}
                </button>

                <button
                  className={`game-btn auction-btn ${
                    !isGameAvailable("auction") ? "disabled" : ""
                  }`}
                  onClick={() =>
                    isGameAvailable("auction") && setCurrentView("auction")
                  }
                  disabled={!isGameAvailable("auction")}
                >
                  <div className="game-icon">üî•</div>
                  <div className="game-title">–ê—É–∫—Ü–∏–æ–Ω</div>
                  <div className="game-subtitle">–°—Ç–∞–≤—å –∏ –≤—ã–∏–≥—Ä—ã–≤–∞–π</div>
                  <div className="game-points">–ü—Ä–∏–∑—ã!</div>
                  {currentPhase === "auction" && (
                    <div className="active-indicator">–ê–ö–¢–ò–í–ù–û</div>
                  )}
                  {!isGameAvailable("auction") && (
                    <div className="disabled-indicator">–ù–ï–î–û–°–¢–£–ü–ù–û</div>
                  )}
                </button>
              </div>
            </div>

            {/* –ü—Ä–∞–≤–∏–ª–∞ */}
            <div className="mobile-rules">
              <h3>üéÆ –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã</h3>
              <div className="rules-list">
                <div className="rule-item">
                  <span className="rule-icon">üéØ</span>
                  <span className="rule-text">
                    3 —Ä–∞—É–Ω–¥–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω –ø–æ 5 –º–∏–Ω—É—Ç
                  </span>
                </div>
                <div className="rule-item">
                  <span className="rule-icon">‚ö°</span>
                  <span className="rule-text">
                    –ë–∞–ª–ª—ã –∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å + —Å–∫–æ—Ä–æ—Å—Ç—å
                  </span>
                </div>
                <div className="rule-item">
                  <span className="rule-icon">üèÜ</span>
                  <span className="rule-text">–ú–∞–∫—Å–∏–º—É–º 600 –±–∞–ª–ª–æ–≤ –≤—Å–µ–≥–æ</span>
                </div>
                <div className="rule-item">
                  <span className="rule-icon">üî•</span>
                  <span className="rule-text">–§–∏–Ω–∞–ª ‚Äî –∞—É–∫—Ü–∏–æ–Ω –ø—Ä–∏–∑–æ–≤!</span>
                </div>
              </div>
            </div>

            {/* –ü—Ä–æ–º–æ Telegram –±–æ—Ç–∞ –¥–ª—è –≤–µ–±-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π */}
            {!isTelegramUser && (
              <div className="telegram-promo">
                <h4>ü§ñ –ò–≥—Ä–∞–π –≤ Telegram!</h4>
                <p>–î–ª—è –ª—É—á—à–µ–≥–æ –æ–ø—ã—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π –Ω–∞—à –±–æ—Ç</p>
                <a
                  href="https://t.me/sothebeatbot"
                  className="bot-link"
                  target="_blank"
                  rel="noopener noreferrer"
                >
                  –û—Ç–∫—Ä—ã—Ç—å @sothebeatbot
                </a>
              </div>
            )}
          </div>
        );
    }
  };

  return <div className="mobile-app">{renderCurrentView()}</div>;
};

export default HomePage;
