import React, { useState, useEffect } from 'react';
import QuizRound from '../components/QuizRound';
import LogicRound from '../components/LogicRound';
import SurveyRound from '../components/SurveyRound';
import AuctionRound from '../components/AuctionRound';

const HomePage = ({ user }) => {
  const [currentView, setCurrentView] = useState('lobby');
  const [userPoints, setUserPoints] = useState(0);
  const [userName, setUserName] = useState('–£—á–∞—Å—Ç–Ω–∏–∫');
  const [userId, setUserId] = useState(null);
  const [teamId, setTeamId] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    if (user && user.id) {
      // –†–µ–∞–ª—å–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ Telegram
      setUserName(user.first_name || user.username || '–£—á–∞—Å—Ç–Ω–∏–∫');
      setUserId(user.id);
      fetchUserProfile(user.id);
    } else {
      // –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      setError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç');
      setLoading(false);
    }
  }, [user]);

  const fetchUserProfile = async (uid) => {
    try {
      const response = await fetch(`/api/users?action=profile&user_id=${uid}`);
      if (response.ok) {
        const userData = await response.json();
        setUserPoints(userData.total_points || 0);
        setTeamId(userData.team_id);
      } else if (response.status === 404) {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –æ–Ω –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏
        setUserPoints(0);
      }
      setLoading(false);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      setLoading(false);
    }
  };

  const handleRoundComplete = async (roundNumber, earnedPoints, roundType, answers) => {
    if (!userId) return;
    
    try {
      const response = await fetch('/api/results', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          action: 'save_round_result',
          user_id: userId,
          round_id: roundNumber,
          round_type: roundType,
          points_earned: earnedPoints,
          total_time: 300,
          answers: answers
        })
      });

      if (response.ok) {
        setUserPoints(prev => prev + earnedPoints);
        alert(`–†–∞—É–Ω–¥ –∑–∞–≤–µ—Ä—à–µ–Ω! –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${earnedPoints} –±–∞–ª–ª–æ–≤`);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', error);
    }
    
    setCurrentView('lobby');
  };

  const handleJoinTeam = async () => {
    if (!userId) {
      alert('–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω');
      return;
    }
    
    const teamCode = prompt('–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∫–æ–º–∞–Ω–¥—ã:');
    if (teamCode) {
      try {
        const response = await fetch('/api/users', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            action: 'join_team',
            user_id: userId,
            team_id: teamCode
          })
        });

        if (response.ok) {
          setTeamId(teamCode);
          alert(`–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ–º–∞–Ω–¥–µ: ${teamCode}`);
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–∞–Ω–¥–µ:', error);
      }
    }
  };

  if (loading) {
    return (
      <div className="loading-screen">
        <div className="loader"></div>
        <p>–ó–∞–≥—Ä—É–∑–∫–∞...</p>
      </div>
    );
  }

  if (error) {
    return (
      <div className="error-screen">
        <h2>‚ö†Ô∏è –û—à–∏–±–∫–∞</h2>
        <p>{error}</p>
        <p>–î–ª—è –∏–≥—Ä—ã –Ω—É–∂–Ω–æ –∑–∞–π—Ç–∏ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç:</p>
        <a href="https://t.me/your_bot_username" className="bot-link">
          –û—Ç–∫—Ä—ã—Ç—å –±–æ—Ç
        </a>
      </div>
    );
  }

  // –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º...
  const renderCurrentView = () => {
    switch (currentView) {
      case 'quiz':
        return (
          <QuizRound
            userId={userId}
            onComplete={(points, answers) => handleRoundComplete(1, points, 'quiz', answers)}
            onBack={() => setCurrentView('lobby')}
          />
        );
      case 'logic':
        return (
          <LogicRound
            userId={userId}
            onComplete={(points, answers) => handleRoundComplete(2, points, 'logic', answers)}
            onBack={() => setCurrentView('lobby')}
          />
        );
      case 'survey':
        return (
          <SurveyRound
            userId={userId}
            onComplete={(points, answers) => handleRoundComplete(3, points, 'survey', answers)}
            onBack={() => setCurrentView('lobby')}
          />
        );
      case 'auction':
        return (
          <AuctionRound
            userId={userId}
            userPoints={userPoints}
            teamId={teamId}
            onBack={() => setCurrentView('lobby')}
          />
        );
      default:
        return (
          <div className="lobby">
            <div className="header">
              <img 
                src="https://via.placeholder.com/120x50/4a90e2/white?text=SotheBEAT" 
                alt="SotheBEAT" 
                className="logo"
              />
            </div>

            <div className="user-info">
              <div className="user-card">
                <div className="avatar">
                  {userName.charAt(0).toUpperCase()}
                </div>
                <div className="user-details">
                  <h3>{userName}</h3>
                  <p>–£—á–∞—Å—Ç–Ω–∏–∫ —Å–æ–±—ã—Ç–∏—è</p>
                  <div className="points">
                    –ë–∞–ª–∞–Ω—Å: <span className="points-value">{userPoints}</span>
                  </div>
                  <div className="phase">
                    –§–∞–∑–∞: <span className="phase-value">lobby</span>
                  </div>
                  {teamId && (
                    <div className="team-info">
                      üë• –ö–æ–º–∞–Ω–¥–∞: {teamId}
                    </div>
                  )}
                  <div className="updated">
                    –û–±–Ω–æ–≤–ª–µ–Ω–æ: {new Date().toLocaleTimeString()}
                  </div>
                </div>
              </div>
            </div>

            <div className="games-grid">
              <button 
                className="game-card quiz-card"
                onClick={() => setCurrentView('quiz')}
              >
                <div className="game-icon">üéØ</div>
                <div className="game-info">
                  <h4>–ö–≤–∏–∑</h4>
                  <p>–†–∞—É–Ω–¥—ã —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤</p>
                  <div className="max-points">–ú–∞–∫—Å: 200 –±–∞–ª–ª–æ–≤</div>
                </div>
              </button>

              <button 
                className="game-card logic-card"
                onClick={() => setCurrentView('logic')}
              >
                <div className="game-icon">üß©</div>
                <div className="game-info">
                  <h4>–ì–¥–µ –ª–æ–≥–∏–∫–∞?</h4>
                  <p>–£–≥–∞–¥–∞–π, —á—Ç–æ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫–∏</p>
                  <div className="max-points">–ú–∞–∫—Å: 200 –±–∞–ª–ª–æ–≤</div>
                </div>
              </button>

              <button 
                className="game-card survey-card"
                onClick={() => setCurrentView('survey')}
              >
                <div className="game-icon">üìä</div>
                <div className="game-info">
                  <h4>100 –∫ 1</h4>
                  <p>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –Ω–µ–æ–±—ã—á–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã</p>
                  <div className="max-points">–ú–∞–∫—Å: 200 –±–∞–ª–ª–æ–≤</div>
                </div>
              </button>

              <button 
                className="game-card team-card"
                onClick={handleJoinTeam}
              >
                <div className="game-icon">ü§ù</div>
                <div className="game-info">
                  <h4>–ï—Å—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç!</h4>
                  <p>–ö–æ–º–∞–Ω–¥–Ω—ã–µ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏ ‚Äî –Ω–∞–π–¥–∏—Ç–µ —Å–ª–æ–≤–æ</p>
                  <div className="max-points">–û–±—ä–µ–¥–∏–Ω—è–π –±–∞–ª–ª—ã</div>
                </div>
              </button>
            </div>

            <button 
              className="auction-button"
              onClick={() => setCurrentView('auction')}
            >
              <div className="auction-icon">üî•</div>
              <div className="auction-info">
                <h4>–ê—É–∫—Ü–∏–æ–Ω</h4>
                <p>–°—Ç–∞–≤—å –±–∞–ª–ª—ã ‚Äî –∑–∞–±–∏—Ä–∞–π –ø—Ä–∏–∑—ã</p>
              </div>
            </button>

            <div className="rules">
              <h3>–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã</h3>
              <ul>
                <li>3 —Ä–∞—É–Ω–¥–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω –ø–æ 5 –º–∏–Ω—É—Ç –∫–∞–∂–¥—ã–π</li>
                <li>–ó–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –∏ —Å–∫–æ—Ä–æ—Å—Ç—å –ø–æ–ª—É—á–∞–µ—à—å –±–∞–ª–ª—ã</li>
                <li>–ú–∞–∫—Å–∏–º—É–º 200 –±–∞–ª–ª–æ–≤ –∑–∞ —Ä–∞—É–Ω–¥ = 600 –≤—Å–µ–≥–æ</li>
                <li>–í —Ñ–∏–Ω–∞–ª–µ - –∞—É–∫—Ü–∏–æ–Ω –ø—Ä–∏–∑–æ–≤ –∑–∞ –±–∞–ª–ª—ã!</li>
                <li>–ú–æ–∂–Ω–æ –æ–±—ä–µ–¥–∏–Ω—è—Ç—å—Å—è –≤ –∫–æ–º–∞–Ω–¥—ã</li>
              </ul>
            </div>
          </div>
        );
    }
  };

  return (
    <div className="home-page">
      {renderCurrentView()}
    </div>
  );
};

export default HomePage;
