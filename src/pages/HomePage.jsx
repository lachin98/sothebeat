cat > (src / pages / HomePage.jsx) << "EOF";
import React, { useState, useEffect } from "react";
import QuizRound from "../components/QuizRound";
import LogicRound from "../components/LogicRound";
import SurveyRound from "../components/SurveyRound";
import AuctionRound from "../components/AuctionRound";

const HomePage = ({ user }) => {
  const [currentView, setCurrentView] = useState("lobby");
  const [userPoints, setUserPoints] = useState(0);
  const [userName, setUserName] = useState("–£—á–∞—Å—Ç–Ω–∏–∫");
  const [userId, setUserId] = useState(null);
  const [teamId, setTeamId] = useState(null);
  const [loading, setLoading] = useState(true);
  const [isTelegramUser, setIsTelegramUser] = useState(false);

  useEffect(() => {
    if (user && user.id) {
      // –ï—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –º–æ–∂–µ—Ç –±—ã—Ç—å Telegram –∏–ª–∏ –≥–æ—Å—Ç–µ–≤–æ–π
      setUserName(user.first_name || user.username || "–£—á–∞—Å—Ç–Ω–∏–∫");
      setUserId(user.id);

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
      const isTgUser = user.id < 999999999999; // Telegram ID –æ–±—ã—á–Ω–æ –º–µ–Ω—å—à–µ
      setIsTelegramUser(isTgUser);

      if (isTgUser) {
        // –†–µ–∞–ª—å–Ω—ã–π Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –ë–î
        fetchUserProfile(user.id);
      } else {
        // –ì–æ—Å—Ç–µ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∏—Å–ø–æ–ª—å–∑—É–µ–º localStorage
        const savedPoints =
          localStorage.getItem(`sothebeat_points_${user.id}`) || "0";
        const savedTeam = localStorage.getItem(`sothebeat_team_${user.id}`);
        setUserPoints(parseInt(savedPoints));
        setTeamId(savedTeam);
        setLoading(false);
      }
    } else {
      // –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - —Å–æ–∑–¥–∞–µ–º –≥–æ—Å—Ç–µ–≤–æ–≥–æ
      const guestId = Date.now();
      const guestUser = {
        id: guestId,
        first_name: "–ì–æ—Å—Ç—å",
        username: "guest",
      };

      setUserName("–ì–æ—Å—Ç—å");
      setUserId(guestId);
      setIsTelegramUser(false);
      setUserPoints(0);
      setLoading(false);
    }
  }, [user]);

  const fetchUserProfile = async (uid) => {
    try {
      const response = await fetch(`/api/users?action=profile&user_id=${uid}`);
      if (response.ok) {
        const userData = await response.json();
        setUserPoints(userData.total_points || 0);
        setTeamId(userData.team_id);
      } else {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω - —Å–æ–∑–¥–∞–µ–º —Å 0 –±–∞–ª–ª–∞–º–∏
        setUserPoints(0);
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:", error);
      setUserPoints(0);
    }
    setLoading(false);
  };

  const handleRoundComplete = async (
    roundNumber,
    earnedPoints,
    roundType,
    answers
  ) => {
    if (!userId) return;

    // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–ª—ã –ª–æ–∫–∞–ª—å–Ω–æ
    const newTotal = userPoints + earnedPoints;
    setUserPoints(newTotal);

    if (isTelegramUser) {
      // Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
      try {
        await fetch("/api/results", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            action: "save_round_result",
            user_id: userId,
            round_id: roundNumber,
            round_type: roundType,
            points_earned: earnedPoints,
            total_time: 300,
            answers: answers,
          }),
        });
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î:", error);
        // Fallback –∫ localStorage
        localStorage.setItem(`sothebeat_points_${userId}`, newTotal.toString());
      }
    } else {
      // –ì–æ—Å—Ç–µ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
      localStorage.setItem(`sothebeat_points_${userId}`, newTotal.toString());
    }

    alert(`–†–∞—É–Ω–¥ –∑–∞–≤–µ—Ä—à–µ–Ω! –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${earnedPoints} –±–∞–ª–ª–æ–≤`);
    setCurrentView("lobby");
  };

  const handleJoinTeam = async () => {
    if (!userId) return;

    const teamCode = prompt("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∫–æ–º–∞–Ω–¥—ã:");
    if (!teamCode) return;

    if (isTelegramUser) {
      // Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
      try {
        const response = await fetch("/api/users", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            action: "join_team",
            user_id: userId,
            team_id: teamCode,
          }),
        });

        if (response.ok) {
          setTeamId(teamCode);
          alert(`–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ–º–∞–Ω–¥–µ: ${teamCode}`);
        } else {
          throw new Error("–û—à–∏–±–∫–∞ API");
        }
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–∞–Ω–¥–µ:", error);
        // Fallback –∫ localStorage
        localStorage.setItem(`sothebeat_team_${userId}`, teamCode);
        setTeamId(teamCode);
        alert(`–ö–æ–º–∞–Ω–¥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ: ${teamCode}`);
      }
    } else {
      // –ì–æ—Å—Ç–µ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
      localStorage.setItem(`sothebeat_team_${userId}`, teamCode);
      setTeamId(teamCode);
      alert(`–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ–º–∞–Ω–¥–µ: ${teamCode} (–ª–æ–∫–∞–ª—å–Ω–æ)`);
    }
  };

  if (loading) {
    return (
      <div className="loading-screen">
        <div className="loader">
          <div className="spinner"></div>
        </div>
        <p>–ó–∞–≥—Ä—É–∑–∫–∞...</p>
      </div>
    );
  }

  const renderCurrentView = () => {
    switch (currentView) {
      case "quiz":
        return (
          <QuizRound
            userId={userId}
            onComplete={(points, answers) =>
              handleRoundComplete(1, points, "quiz", answers)
            }
            onBack={() => setCurrentView("lobby")}
          />
        );
      case "logic":
        return (
          <LogicRound
            userId={userId}
            onComplete={(points, answers) =>
              handleRoundComplete(2, points, "logic", answers)
            }
            onBack={() => setCurrentView("lobby")}
          />
        );
      case "survey":
        return (
          <SurveyRound
            userId={userId}
            onComplete={(points, answers) =>
              handleRoundComplete(3, points, "survey", answers)
            }
            onBack={() => setCurrentView("lobby")}
          />
        );
      case "auction":
        return (
          <AuctionRound
            userId={userId}
            userPoints={userPoints}
            teamId={teamId}
            onBack={() => setCurrentView("lobby")}
          />
        );
      default:
        return (
          <div className="lobby">
            <div className="header">
              <img
                src="https://via.placeholder.com/120x50/4a90e2/white?text=SotheBEAT"
                alt="SotheBEAT"
                className="logo"
              />
            </div>

            <div className="user-info">
              <div className="user-card">
                <div className="avatar">{userName.charAt(0).toUpperCase()}</div>
                <div className="user-details">
                  <h3>{userName}</h3>
                  <p>
                    {isTelegramUser
                      ? "Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                      : "–í–µ–± –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"}
                  </p>
                  <div className="points">
                    –ë–∞–ª–∞–Ω—Å: <span className="points-value">{userPoints}</span>
                  </div>
                  <div className="phase">
                    –§–∞–∑–∞: <span className="phase-value">lobby</span>
                  </div>
                  {teamId && (
                    <div className="team-info">üë• –ö–æ–º–∞–Ω–¥–∞: {teamId}</div>
                  )}
                  {!isTelegramUser && (
                    <div className="web-user-notice">
                      üåê –í–µ–±-–≤–µ—Ä—Å–∏—è (–¥–∞–Ω–Ω—ã–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ)
                    </div>
                  )}
                  <div className="updated">
                    –û–±–Ω–æ–≤–ª–µ–Ω–æ: {new Date().toLocaleTimeString()}
                  </div>
                </div>
              </div>
            </div>

            <div className="games-grid">
              <button
                className="game-card quiz-card"
                onClick={() => setCurrentView("quiz")}
              >
                <div className="game-icon">üéØ</div>
                <div className="game-info">
                  <h4>–ö–≤–∏–∑</h4>
                  <p>–†–∞—É–Ω–¥—ã —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤</p>
                  <div className="max-points">–ú–∞–∫—Å: 200 –±–∞–ª–ª–æ–≤</div>
                </div>
              </button>

              <button
                className="game-card logic-card"
                onClick={() => setCurrentView("logic")}
              >
                <div className="game-icon">üß©</div>
                <div className="game-info">
                  <h4>–ì–¥–µ –ª–æ–≥–∏–∫–∞?</h4>
                  <p>–£–≥–∞–¥–∞–π, —á—Ç–æ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫–∏</p>
                  <div className="max-points">–ú–∞–∫—Å: 200 –±–∞–ª–ª–æ–≤</div>
                </div>
              </button>

              <button
                className="game-card survey-card"
                onClick={() => setCurrentView("survey")}
              >
                <div className="game-icon">üìä</div>
                <div className="game-info">
                  <h4>100 –∫ 1</h4>
                  <p>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –Ω–µ–æ–±—ã—á–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã</p>
                  <div className="max-points">–ú–∞–∫—Å: 200 –±–∞–ª–ª–æ–≤</div>
                </div>
              </button>

              <button className="game-card team-card" onClick={handleJoinTeam}>
                <div className="game-icon">ü§ù</div>
                <div className="game-info">
                  <h4>–ï—Å—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç!</h4>
                  <p>–ö–æ–º–∞–Ω–¥–Ω—ã–µ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏ ‚Äî –Ω–∞–π–¥–∏—Ç–µ —Å–ª–æ–≤–æ</p>
                  <div className="max-points">–û–±—ä–µ–¥–∏–Ω—è–π –±–∞–ª–ª—ã</div>
                </div>
              </button>
            </div>

            <button
              className="auction-button"
              onClick={() => setCurrentView("auction")}
            >
              <div className="auction-icon">üî•</div>
              <div className="auction-info">
                <h4>–ê—É–∫—Ü–∏–æ–Ω</h4>
                <p>–°—Ç–∞–≤—å –±–∞–ª–ª—ã ‚Äî –∑–∞–±–∏—Ä–∞–π –ø—Ä–∏–∑—ã</p>
              </div>
            </button>

            <div className="rules">
              <h3>–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã</h3>
              <ul>
                <li>3 —Ä–∞—É–Ω–¥–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω –ø–æ 5 –º–∏–Ω—É—Ç –∫–∞–∂–¥—ã–π</li>
                <li>–ó–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –∏ —Å–∫–æ—Ä–æ—Å—Ç—å –ø–æ–ª—É—á–∞–µ—à—å –±–∞–ª–ª—ã</li>
                <li>–ú–∞–∫—Å–∏–º—É–º 200 –±–∞–ª–ª–æ–≤ –∑–∞ —Ä–∞—É–Ω–¥ = 600 –≤—Å–µ–≥–æ</li>
                <li>–í —Ñ–∏–Ω–∞–ª–µ - –∞—É–∫—Ü–∏–æ–Ω –ø—Ä–∏–∑–æ–≤ –∑–∞ –±–∞–ª–ª—ã!</li>
                <li>–ú–æ–∂–Ω–æ –æ–±—ä–µ–¥–∏–Ω—è—Ç—å—Å—è –≤ –∫–æ–º–∞–Ω–¥—ã</li>
              </ul>
            </div>

            {!isTelegramUser && (
              <div className="telegram-promo">
                <h4>ü§ñ –õ—É—á—à–∏–π –æ–ø—ã—Ç –≤ Telegram!</h4>
                <p>–î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏—Å–ø–æ–ª—å–∑—É–π –±–æ—Ç:</p>
                <a
                  href="https://t.me/sothebeatbot"
                  className="bot-link"
                  target="_blank"
                  rel="noopener noreferrer"
                >
                  –û—Ç–∫—Ä—ã—Ç—å @sothebeatbot
                </a>
              </div>
            )}
          </div>
        );
    }
  };

  return <div className="home-page">{renderCurrentView()}</div>;
};

export default HomePage;
EOF;
