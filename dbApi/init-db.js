const { sql } = require('@vercel/postgres');

module.exports = async (req, res) => {
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
  
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  const { secret } = req.body;
  if (secret !== 'init-sothebeat-2025') {
    return res.status(401).json({ error: 'Unauthorized' });
  }

  try {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');

    // –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Telegram
    await sql`
      CREATE TABLE IF NOT EXISTS telegram_users (
        id BIGINT PRIMARY KEY,
        username VARCHAR(255),
        first_name VARCHAR(255),
        last_name VARCHAR(255),
        language_code VARCHAR(10),
        is_bot BOOLEAN DEFAULT false,
        total_points INTEGER DEFAULT 0,
        current_phase VARCHAR(50) DEFAULT 'lobby',
        team_id VARCHAR(100),
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );
    `;

    // –¢–∞–±–ª–∏—Ü–∞ —Ä–∞—É–Ω–¥–æ–≤ –∏–≥—Ä—ã
    await sql`
      CREATE TABLE IF NOT EXISTS game_rounds (
        id SERIAL PRIMARY KEY,
        round_number INTEGER NOT NULL,
        round_type VARCHAR(50) NOT NULL, -- 'quiz', 'logic', 'survey', 'auction'
        title VARCHAR(255) NOT NULL,
        description TEXT,
        max_points INTEGER DEFAULT 200,
        time_limit INTEGER DEFAULT 300, -- –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        is_active BOOLEAN DEFAULT false,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );
    `;

    // –¢–∞–±–ª–∏—Ü–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∫–≤–∏–∑–∞ (—Ä–∞—É–Ω–¥ 1)
    await sql`
      CREATE TABLE IF NOT EXISTS quiz_questions (
        id SERIAL PRIMARY KEY,
        round_id INTEGER REFERENCES game_rounds(id),
        question_text TEXT NOT NULL,
        option_a VARCHAR(500),
        option_b VARCHAR(500),
        option_c VARCHAR(500),
        option_d VARCHAR(500),
        correct_answer INTEGER NOT NULL, -- 0, 1, 2, 3
        points INTEGER DEFAULT 10,
        order_num INTEGER DEFAULT 0,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );
    `;

    // –¢–∞–±–ª–∏—Ü–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ "–ì–¥–µ –ª–æ–≥–∏–∫–∞?" (—Ä–∞—É–Ω–¥ 2)
    await sql`
      CREATE TABLE IF NOT EXISTS logic_questions (
        id SERIAL PRIMARY KEY,
        round_id INTEGER REFERENCES game_rounds(id),
        question_text TEXT NOT NULL,
        images JSONB, -- –º–∞—Å—Å–∏–≤ –∫–∞—Ä—Ç–∏–Ω–æ–∫/—ç–º–æ–¥–∑–∏
        correct_answer VARCHAR(255) NOT NULL,
        alternatives JSONB, -- –º–∞—Å—Å–∏–≤ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        points INTEGER DEFAULT 15,
        order_num INTEGER DEFAULT 0,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );
    `;

    // –¢–∞–±–ª–∏—Ü–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ "100 –∫ 1" (—Ä–∞—É–Ω–¥ 3)
    await sql`
      CREATE TABLE IF NOT EXISTS survey_questions (
        id SERIAL PRIMARY KEY,
        round_id INTEGER REFERENCES game_rounds(id),
        question_text TEXT NOT NULL,
        answers JSONB NOT NULL, -- [{"text": "–æ—Ç–≤–µ—Ç", "points": 47}, ...]
        order_num INTEGER DEFAULT 0,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );
    `;

    // –¢–∞–±–ª–∏—Ü–∞ –ª–æ—Ç–æ–≤ –∞—É–∫—Ü–∏–æ–Ω–∞
    await sql`
      CREATE TABLE IF NOT EXISTS auction_lots (
        id SERIAL PRIMARY KEY,
        name VARCHAR(255) NOT NULL,
        description TEXT,
        image_url VARCHAR(500),
        emoji VARCHAR(10),
        start_price INTEGER DEFAULT 200,
        current_bid INTEGER DEFAULT 0,
        winner_id BIGINT REFERENCES telegram_users(id),
        is_sold BOOLEAN DEFAULT false,
        order_num INTEGER DEFAULT 0,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );
    `;

    // –¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–≥—Ä–æ–∫–æ–≤
    await sql`
      CREATE TABLE IF NOT EXISTS player_results (
        id SERIAL PRIMARY KEY,
        user_id BIGINT REFERENCES telegram_users(id),
        round_id INTEGER REFERENCES game_rounds(id),
        round_type VARCHAR(50),
        points_earned INTEGER DEFAULT 0,
        total_time INTEGER, -- –≤—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        answers JSONB, -- –¥–µ—Ç–∞–ª–∏ –æ—Ç–≤–µ—Ç–æ–≤
        completed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );
    `;

    // –¢–∞–±–ª–∏—Ü–∞ –∫–æ–º–∞–Ω–¥
    await sql`
      CREATE TABLE IF NOT EXISTS teams (
        id VARCHAR(100) PRIMARY KEY,
        name VARCHAR(255),
        total_points INTEGER DEFAULT 0,
        member_count INTEGER DEFAULT 0,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );
    `;

    // –¢–∞–±–ª–∏—Ü–∞ —Å—Ç–∞–≤–æ–∫ –Ω–∞ –∞—É–∫—Ü–∏–æ–Ω–µ
    await sql`
      CREATE TABLE IF NOT EXISTS auction_bids (
        id SERIAL PRIMARY KEY,
        lot_id INTEGER REFERENCES auction_lots(id),
        user_id BIGINT REFERENCES telegram_users(id),
        team_id VARCHAR(100) REFERENCES teams(id),
        bid_amount INTEGER NOT NULL,
        is_winning BOOLEAN DEFAULT false,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );
    `;

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã
    await sql`
      CREATE TABLE IF NOT EXISTS game_config (
        key VARCHAR(100) PRIMARY KEY,
        value JSONB,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );
    `;

    // –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    await sql`
      INSERT INTO game_config (key, value) VALUES 
      ('current_phase', '"lobby"'),
      ('phases_status', '{"quiz": false, "logic": false, "contact": false, "survey": false, "auction": false}'),
      ('online_users', '0'),
      ('event_started', 'false')
      ON CONFLICT (key) DO UPDATE SET
        value = EXCLUDED.value,
        updated_at = CURRENT_TIMESTAMP;
    `;

    // –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ —Ä–∞—É–Ω–¥—ã
    const quizRound = await sql`
      INSERT INTO game_rounds (round_number, round_type, title, description, max_points, time_limit)
      VALUES (1, 'quiz', '–ö–≤–∏–∑ –ø—Ä–æ Ballantine''s', '–í–∏—Å–∫–∏, –¥–æ—Å—Ç–æ–π–Ω—ã–π –∫–æ—Ä–æ–Ω—ã!', 200, 300)
      ON CONFLICT DO NOTHING
      RETURNING id;
    `;

    const logicRound = await sql`
      INSERT INTO game_rounds (round_number, round_type, title, description, max_points, time_limit)
      VALUES (2, 'logic', '–ì–¥–µ –ª–æ–≥–∏–∫–∞?', '–£–≥–∞–¥–∞–π, —á—Ç–æ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫–∏', 200, 300)
      ON CONFLICT DO NOTHING
      RETURNING id;
    `;

    const surveyRound = await sql`
      INSERT INTO game_rounds (round_number, round_type, title, description, max_points, time_limit)
      VALUES (3, 'survey', '100 –∫ 1', '–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –±–∞—Ä–º–µ–Ω–æ–≤', 200, 300)
      ON CONFLICT DO NOTHING
      RETURNING id;
    `;

    // –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –ª–æ—Ç—ã –∞—É–∫—Ü–∏–æ–Ω–∞
    await sql`
      INSERT INTO auction_lots (name, description, emoji, start_price, order_num) VALUES 
      ('–ú–µ—Ä—á –æ—Ç –ó–µ—Ä–Ω–æ–≤–∞', '–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –º–µ—Ä—á –æ—Ç –∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –±–∞—Ä–º–µ–Ω–∞', 'üéÅ', 200, 1),
      ('–§—É—Ç–±–æ–ª–∫–∞ —Å –∞–≤—Ç–æ–≥—Ä–∞—Ñ–∞–º–∏ –≤—Å–µ—Ö —Å–ø–∏–∫–µ—Ä–æ–≤ BEAT 2025', '–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω–∞—è —Ñ—É—Ç–±–æ–ª–∫–∞ —Å –∞–≤—Ç–æ–≥—Ä–∞—Ñ–∞–º–∏', 'üëï', 200, 2),
      ('–†–µ–∫–ª–∞–º–∞ –≤ –∏–Ω—Å—Ç–∞–≥—Ä–∞–º–µ BEAT', '–ö—Ä–æ—Å—Å –ø–æ—Å—Ç + —Å—Ç–æ—Ä–∏—Å –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ', 'üì±', 200, 3),
      ('–ú–µ—Ä—á –æ—Ç –ü–µ—Ä—É–∫–∞', '–§–∏—Ä–º–µ–Ω–Ω—ã–µ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã –æ—Ç –ü–µ—Ä—É–∫–∞', 'üé™', 200, 4),
      ('–ë–µ–∑–ª–∏–º–∏—Ç –Ω–∞ –∫–æ–∫—Ç–µ–π–ª–∏ –Ω–∞ –∞—Ñ—Ç–µ–ø–∞—Ç–∏', '–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –∫–æ–∫—Ç–µ–π–ª–∏ –Ω–∞ –∞—Ñ—Ç–µ–ø–∞—Ç–∏', 'üçπ', 200, 5),
      ('–°–±–æ—Ä–Ω–∏–∫ –º–µ—Ä—á–∞ –æ—Ç –±—Ä–µ–Ω–¥–æ–≤ Pernod Ricard', '–ü–æ–¥–∞—Ä–æ—á–Ω—ã–π –Ω–∞–±–æ—Ä –æ—Ç —Å–ø–æ–Ω—Å–æ—Ä–∞', 'üì¶', 200, 6),
      ('–Ø—â–∏–∫ —Ä–∞–∑–Ω–æ–≥–æ –∞–ª–∫–æ–≥–æ–ª—è', 'ARARAT, Ballantines, Jameson, Havana Club –∏ –¥—Ä.', 'ü•É', 200, 7)
      ON CONFLICT DO NOTHING;
    `;

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await sql`
      INSERT INTO telegram_users (id, username, first_name, total_points) VALUES 
      (123456789, 'test_user', '–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', 100)
      ON CONFLICT (id) DO UPDATE SET
        username = EXCLUDED.username,
        first_name = EXCLUDED.first_name;
    `;

    const userCount = await sql`SELECT COUNT(*) as count FROM telegram_users`;
    const roundsCount = await sql`SELECT COUNT(*) as count FROM game_rounds`;
    const lotsCount = await sql`SELECT COUNT(*) as count FROM auction_lots`;

    console.log('üéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!');

    return res.status(200).json({
      success: true,
      message: '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞',
      stats: {
        users: parseInt(userCount.rows[0].count),
        rounds: parseInt(roundsCount.rows[0].count),
        lots: parseInt(lotsCount.rows[0].count)
      }
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î:', error);
    return res.status(500).json({
      success: false,
      error: error.message
    });
  }
};
