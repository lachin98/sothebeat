const TelegramBot = require("node-telegram-bot-api");
const { sql } = require("@vercel/postgres");

module.exports = async (req, res) => {
  res.setHeader("Access-Control-Allow-Origin", "*");
  res.setHeader("Access-Control-Allow-Methods", "GET, POST");
  res.setHeader("Access-Control-Allow-Headers", "Content-Type");

  if (req.method !== "POST") {
    return res
      .status(200)
      .json({ ok: true, message: "Webhook endpoint ready" });
  }

  try {
    const token = process.env.TELEGRAM_BOT_TOKEN;
    const webAppUrl =
      process.env.WEBAPP_URL || "https://southbeat-bot.vercel.app";

    if (!token) {
      console.error("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω");
      return res.status(500).json({ error: "Bot token not found" });
    }

    const bot = new TelegramBot(token);
    const { body } = req;

    console.log(
      "–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç Telegram:",
      JSON.stringify(body, null, 2)
    );

    if (body.message) {
      const chatId = body.message.chat.id;
      const user = body.message.from;

      // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await registerUser(user);

      if (body.message.text === "/start") {
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∫–Ω–æ–ø–∫—É-—Å—Å—ã–ª–∫—É
        const keyboard = {
          inline_keyboard: [
            [
              {
                text: "üéØ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É SotheBEAT!",
                url: webAppUrl,
              },
            ],
          ],
        };

        const welcomeMessage =
          `üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ BEAT 2025, ${user.first_name}!\n\n` +
          `–≠—Ç–æ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∞—É–∫—Ü–∏–æ–Ω –≤ —Å—Ç–∏–ª–µ Sotheby's –≤ –º–∏—Ä–µ –±–∞—Ä–Ω–æ–≥–æ –∏—Å–∫—É—Å—Å—Ç–≤–∞!\n\n` +
          `üìù –ü—Ä–∞–≤–∏–ª–∞:\n` +
          `‚Ä¢ 3 —Ä–∞—É–Ω–¥–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω (5 –º–∏–Ω—É—Ç –∫–∞–∂–¥—ã–π)\n` +
          `‚Ä¢ –ó–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –∏ —Å–∫–æ—Ä–æ—Å—Ç—å –ø–æ–ª—É—á–∞–µ—Ç–µ –±–∞–ª–ª—ã\n` +
          `‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 200 –±–∞–ª–ª–æ–≤ –∑–∞ —Ä–∞—É–Ω–¥ = 600 –≤—Å–µ–≥–æ\n` +
          `‚Ä¢ –í —Ñ–∏–Ω–∞–ª–µ - –∞—É–∫—Ü–∏–æ–Ω –ø—Ä–∏–∑–æ–≤ –∑–∞ –±–∞–ª–ª—ã!\n\n` +
          `ü§ù –ú–æ–∂–µ—Ç–µ –æ–±—ä–µ–¥–∏–Ω—è—Ç—å—Å—è –≤ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ª–æ—Ç–æ–≤\n\n` +
          `–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å? –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ! üëá`;

        await bot.sendMessage(chatId, " ", {
          reply_markup: {
            keyboard: [[{ text: "üéØ –ò–≥—Ä–∞—Ç—å" }]],
            resize_keyboard: true,
            one_time_keyboard: false,
          },
        });

        // await bot.sendMessage(chatId, welcomeMessage, {
        //   reply_markup: keyboard
        // });

        // –î—É–±–ª–∏—Ä—É–µ–º —Å Web App –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
        // try {
        //   const webAppKeyboard = {
        //     inline_keyboard: [[
        //       {
        //         text: 'üéÆ Web App –ò–≥—Ä–∞',
        //         web_app: { url: webAppUrl }
        //       }
        //     ]]
        //   };

        //   await bot.sendMessage(chatId,
        //     '–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Web App –≤–µ—Ä—Å–∏—é (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è):',
        //     { reply_markup: webAppKeyboard }
        //   );
        // } catch (webAppError) {
        //   console.log('Web App –∫–Ω–æ–ø–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è:', webAppError.message);
        // }

        console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.first_name} (${user.id}) –Ω–∞—á–∞–ª –∏–≥—Ä—É`);
      }

      if (body.message.text === "/play") {
        await bot.sendMessage(
          chatId,
          `üéÆ –°—Å—ã–ª–∫–∞ –Ω–∞ –∏–≥—Ä—É: ${webAppUrl}\n\n` +
            "–û—Ç–∫—Ä–æ–π—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ –¥–ª—è –∏–≥—Ä—ã!"
        );
      }
    }

    await updateOnlineCount();
    res.status(200).json({ ok: true });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ webhook:", error);
    res.status(200).json({ ok: true, error: error.message });
  }
};

// –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º–∏...
async function registerUser(telegramUser) {
  try {
    const result = await sql`
      INSERT INTO telegram_users (id, username, first_name, last_name, language_code, is_bot)
      VALUES (${telegramUser.id}, ${telegramUser.username}, ${
      telegramUser.first_name
    }, 
              ${telegramUser.last_name}, ${telegramUser.language_code}, ${
      telegramUser.is_bot || false
    })
      ON CONFLICT (id) DO UPDATE SET
        username = EXCLUDED.username,
        first_name = EXCLUDED.first_name,
        last_name = EXCLUDED.last_name,
        language_code = EXCLUDED.language_code,
        updated_at = CURRENT_TIMESTAMP
      RETURNING total_points, team_id
    `;
    console.log(
      `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${telegramUser.first_name} (${telegramUser.id}) –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω`
    );
    return result.rows[0];
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
  }
}

async function updateOnlineCount() {
  try {
    const onlineCount = await sql`
      SELECT COUNT(DISTINCT id) as count 
      FROM telegram_users 
      WHERE updated_at > NOW() - INTERVAL '10 minutes'
    `;

    await sql`
      UPDATE game_config 
      SET value = ${JSON.stringify(onlineCount.rows[0].count)}, 
          updated_at = CURRENT_TIMESTAMP
      WHERE key = 'online_users'
    `;
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –æ–Ω–ª–∞–π–Ω:", error);
  }
}
