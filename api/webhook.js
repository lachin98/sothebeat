const TelegramBot = require('node-telegram-bot-api');
const { sql } = require('@vercel/postgres');

module.exports = async (req, res) => {
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

  if (req.method !== 'POST') {
    return res.status(200).json({ ok: true, message: 'Webhook endpoint ready' });
  }

  try {
    const token = process.env.TELEGRAM_BOT_TOKEN;
    const webAppUrl = process.env.WEBAPP_URL || 'https://southbeat-bot.vercel.app';
    
    if (!token) {
      console.error('TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return res.status(500).json({ error: 'Bot token not found' });
    }

    const bot = new TelegramBot(token);
    const { body } = req;

    console.log('–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç Telegram:', JSON.stringify(body, null, 2));

    if (body.message) {
      const chatId = body.message.chat.id;
      const user = body.message.from;
      
      // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      await registerUser(user);
      
      if (body.message.text === '/start') {
        const keyboard = {
          inline_keyboard: [[
            {
              text: 'üéØ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É SotheBEAT!',
              web_app: { url: webAppUrl }
            }
          ]]
        };

        const welcomeMessage = `üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ BEAT 2025, ${user.first_name}!\n\n` +
          `–≠—Ç–æ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∞—É–∫—Ü–∏–æ–Ω –≤ —Å—Ç–∏–ª–µ Sotheby's –≤ –º–∏—Ä–µ –±–∞—Ä–Ω–æ–≥–æ –∏—Å–∫—É—Å—Å—Ç–≤–∞!\n\n` +
          `üìù –ü—Ä–∞–≤–∏–ª–∞:\n` +
          `‚Ä¢ 3 —Ä–∞—É–Ω–¥–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω (5 –º–∏–Ω—É—Ç –∫–∞–∂–¥—ã–π)\n` +
          `‚Ä¢ –ó–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –∏ —Å–∫–æ—Ä–æ—Å—Ç—å –ø–æ–ª—É—á–∞–µ—Ç–µ –±–∞–ª–ª—ã\n` +
          `‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 200 –±–∞–ª–ª–æ–≤ –∑–∞ —Ä–∞—É–Ω–¥ = 600 –≤—Å–µ–≥–æ\n` +
          `‚Ä¢ –í —Ñ–∏–Ω–∞–ª–µ - –∞—É–∫—Ü–∏–æ–Ω –ø—Ä–∏–∑–æ–≤ –∑–∞ –±–∞–ª–ª—ã!\n\n` +
          `ü§ù –ú–æ–∂–µ—Ç–µ –æ–±—ä–µ–¥–∏–Ω—è—Ç—å—Å—è –≤ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ª–æ—Ç–æ–≤\n\n` +
          `–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å? –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ! üëá`;

        await bot.sendMessage(chatId, welcomeMessage, { 
          reply_markup: keyboard,
          parse_mode: 'HTML'
        });

        console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.first_name} (${user.id}) –Ω–∞—á–∞–ª –∏–≥—Ä—É`);
      }

      if (body.message.text && body.message.text.startsWith('/join_')) {
        // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–∞–Ω–¥–µ: /join_team123
        const teamId = body.message.text.replace('/join_', '');
        await joinTeam(user.id, teamId);
        
        await bot.sendMessage(chatId, 
          `‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ–º–∞–Ω–¥–µ: ${teamId}\n` +
          `–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—ä–µ–¥–∏–Ω—è—Ç—å –±–∞–ª–ª—ã —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –∫–æ–º–∞–Ω–¥—ã!`
        );
      }

      if (body.message.text === '/profile') {
        const userProfile = await getUserProfile(user.id);
        const profileMessage = `üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n` +
          `üí∞ –ë–∞–ª–ª—ã: ${userProfile.total_points}\n` +
          `üë• –ö–æ–º–∞–Ω–¥–∞: ${userProfile.team_id || '–ë–µ–∑ –∫–æ–º–∞–Ω–¥—ã'}\n` +
          `üìä –§–∞–∑–∞: ${userProfile.current_phase}\n\n` +
          `–î–ª—è –∏–≥—Ä—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Web App –∫–Ω–æ–ø–∫—É –≤—ã—à–µ!`;
        
        await bot.sendMessage(chatId, profileMessage);
      }
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback –æ—Ç Web App
    if (body.callback_query) {
      const callbackData = body.callback_query.data;
      const user = body.callback_query.from;
      
      await bot.answerCallbackQuery(body.callback_query.id);
      
      if (callbackData === 'start_game') {
        await bot.sendMessage(user.id, '–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Web App –¥–ª—è —É—á–∞—Å—Ç–∏—è.');
      }
    }

    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    await updateOnlineCount();
    
    res.status(200).json({ ok: true });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ webhook:', error);
    res.status(200).json({ ok: true, error: error.message });
  }
};

// –§—É–Ω–∫—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function registerUser(telegramUser) {
  try {
    const result = await sql`
      INSERT INTO telegram_users (id, username, first_name, last_name, language_code, is_bot)
      VALUES (${telegramUser.id}, ${telegramUser.username}, ${telegramUser.first_name}, 
              ${telegramUser.last_name}, ${telegramUser.language_code}, ${telegramUser.is_bot || false})
      ON CONFLICT (id) DO UPDATE SET
        username = EXCLUDED.username,
        first_name = EXCLUDED.first_name,
        last_name = EXCLUDED.last_name,
        language_code = EXCLUDED.language_code,
        updated_at = CURRENT_TIMESTAMP
      RETURNING total_points, team_id
    `;

    console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${telegramUser.first_name} (${telegramUser.id}) –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω`);
    return result.rows[0];
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–∞–Ω–¥–µ
async function joinTeam(userId, teamId) {
  try {
    // –°–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    await sql`
      INSERT INTO teams (id, name, member_count)
      VALUES (${teamId}, ${teamId}, 0)
      ON CONFLICT (id) DO NOTHING
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–º–∞–Ω–¥—É
    await sql`
      UPDATE telegram_users 
      SET team_id = ${teamId}, updated_at = CURRENT_TIMESTAMP
      WHERE id = ${userId}
    `;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã
    await sql`
      UPDATE teams 
      SET member_count = (
        SELECT COUNT(*) FROM telegram_users WHERE team_id = ${teamId}
      ),
      total_points = (
        SELECT COALESCE(SUM(total_points), 0) FROM telegram_users WHERE team_id = ${teamId}
      )
      WHERE id = ${teamId}
    `;

    console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–æ–º–∞–Ω–¥–µ ${teamId}`);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–∞–Ω–¥–µ:', error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function getUserProfile(userId) {
  try {
    const result = await sql`
      SELECT * FROM telegram_users WHERE id = ${userId}
    `;
    return result.rows[0] || null;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
    return null;
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async function updateOnlineCount() {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –º–∏–Ω—É—Ç
    const onlineCount = await sql`
      SELECT COUNT(DISTINCT id) as count 
      FROM telegram_users 
      WHERE updated_at > NOW() - INTERVAL '10 minutes'
    `;

    await sql`
      UPDATE game_config 
      SET value = ${JSON.stringify(onlineCount.rows[0].count)}, 
          updated_at = CURRENT_TIMESTAMP
      WHERE key = 'online_users'
    `;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –æ–Ω–ª–∞–π–Ω:', error);
  }
}
