const { sql } = require('@vercel/postgres');

module.exports = async (req, res) => {
  const { method, body, query } = req;
  
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
  res.setHeader('Cache-Control', 'no-store, no-cache, must-revalidate');

  try {
    switch (method) {
      case 'GET':
        // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ª–æ—Ç—ã
        if (query.action === 'lots') {
          return await getAllLots(res);
        }
        
        // –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –ª–æ—Ç
        if (query.action === 'active') {
          return await getActiveLot(res);
        }
        
        // –ü–æ–ª—É—á–∏—Ç—å –∂–∏–≤–æ–π —á–∞—Ç –≤—Å–µ—Ö —Å—Ç–∞–≤–æ–∫ –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
        if (query.action === 'live_bids' && query.admin_token === 'a') {
          const limit = query.limit || 50;
          return await getLiveBidsChat(res, limit);
        }
        
        break;

      case 'POST':
        // –ê–¥–º–∏–Ω—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
        if (body.admin_token === 'a') {
          if (body.action === 'start_lot') {
            return await startLot(res, body.lot_id);
          }
          
          if (body.action === 'end_lot') {
            return await endLot(res, body.lot_id);
          }
          
          if (body.action === 'add_lot') {
            return await addLot(res, body);
          }
          
          if (body.action === 'announce_winner') {
            return await announceWinner(res, body.lot_id, body.winner_message);
          }
        }

        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —Å—Ç–∞–≤–∫–∞
        if (body.action === 'place_bid') {
          return await placeBid(res, body);
        }
        
        break;

      default:
        return res.status(405).json({ message: 'Method not allowed' });
    }
    
    res.status(400).json({ message: 'Invalid request' });
  } catch (error) {
    console.error('Auction API error:', error);
    res.status(500).json({ error: 'Internal server error', details: error.message });
  }
};

async function getAllLots(res) {
  const lots = await sql`
    SELECT 
      l.*,
      (SELECT COUNT(*) FROM auction_bids WHERE lot_id = l.id) as bid_count,
      (SELECT MAX(bid_amount) FROM auction_bids WHERE lot_id = l.id) as highest_bid,
      (SELECT user_name FROM auction_bids WHERE lot_id = l.id ORDER BY bid_amount DESC, created_at ASC LIMIT 1) as leading_bidder
    FROM auction_lots l
    ORDER BY l.order_num, l.id
  `;
  
  return res.json(lots.rows);
}

async function getActiveLot(res) {
  const activeLot = await sql`
    SELECT 
      l.*,
      (SELECT COUNT(*) FROM auction_bids WHERE lot_id = l.id) as bid_count,
      (SELECT MAX(bid_amount) FROM auction_bids WHERE lot_id = l.id) as highest_bid,
      (SELECT user_name FROM auction_bids WHERE lot_id = l.id ORDER BY bid_amount DESC, created_at ASC LIMIT 1) as leading_bidder
    FROM auction_lots l
    WHERE l.is_active = true AND l.is_completed = false
    ORDER BY l.order_num
    LIMIT 1
  `;

  if (activeLot.rows.length === 0) {
    return res.json({ lot: null });
  }

  const lot = activeLot.rows[0];

  return res.json({
    lot,
    serverTime: new Date().toISOString()
  });
}

async function getLiveBidsChat(res, limit) {
  const bids = await sql`
    SELECT 
      ab.*,
      al.title as lot_title,
      al.is_active as lot_is_active,
      (ab.bid_amount = (SELECT MAX(bid_amount) FROM auction_bids WHERE lot_id = ab.lot_id)) as is_leading
    FROM auction_bids ab
    JOIN auction_lots al ON ab.lot_id = al.id
    ORDER BY ab.created_at DESC
    LIMIT ${limit}
  `;
  
  return res.json(bids.rows);
}

async function startLot(res, lotId) {
  console.log(`üèõÔ∏è Starting auction for lot ${lotId}`);
  
  // –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ª–æ—Ç—ã –ò –í–û–ó–í–†–ê–©–ê–ï–ú –ë–ê–õ–õ–´ –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏–º
  await returnBidsFromPreviousLots();
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ª–æ—Ç
  await sql`
    UPDATE auction_lots 
    SET 
      is_active = true,
      is_completed = false,
      auction_started_at = CURRENT_TIMESTAMP,
      auction_ends_at = NULL,
      current_price = starting_price,
      winner_user_id = NULL,
      winner_name = NULL
    WHERE id = ${lotId}
  `;
  
  console.log(`üî• Lot ${lotId} started (manual control)`);
  
  return res.json({ 
    success: true, 
    lot_id: lotId,
    message: `–ê—É–∫—Ü–∏–æ–Ω –∑–∞–ø—É—â–µ–Ω! –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –≤—Ä—É—á–Ω—É—é.`
  });
}

// –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–ª–ª—ã –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –ª–æ—Ç–æ–≤
async function returnBidsFromPreviousLots() {
  // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ª–æ—Ç—ã
  const activeLots = await sql`
    SELECT id FROM auction_lots WHERE is_active = true
  `;
  
  for (const lot of activeLots.rows) {
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–ª–ª—ã –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —ç—Ç–æ–≥–æ –ª–æ—Ç–∞ (–∫—Ä–æ–º–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è)
    const bids = await sql`
      SELECT DISTINCT user_id, SUM(bid_amount) as total_bids
      FROM auction_bids 
      WHERE lot_id = ${lot.id}
      GROUP BY user_id
    `;
    
    for (const bid of bids.rows) {
      await sql`
        UPDATE telegram_users 
        SET total_points = total_points + ${bid.total_bids}
        WHERE id = ${bid.user_id}
      `;
      console.log(`üí∞ Returned ${bid.total_bids} points to user ${bid.user_id}`);
    }
  }
  
  // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ –ª–æ—Ç—ã
  await sql`
    UPDATE auction_lots 
    SET is_active = false 
    WHERE is_active = true
  `;
}

async function endLot(res, lotId) {
  console.log(`‚èπÔ∏è Ending auction for lot ${lotId}`);
  
  // –ù–∞—Ö–æ–¥–∏–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è (—Å–∞–º–∞—è –≤—ã—Å–æ–∫–∞—è —Å—Ç–∞–≤–∫–∞)
  const winner = await sql`
    SELECT user_id, user_name, bid_amount, team_id, created_at
    FROM auction_bids 
    WHERE lot_id = ${lotId}
    ORDER BY bid_amount DESC, created_at ASC
    LIMIT 1
  `;
  
  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–æ—Ç–µ
  const lotInfo = await sql`
    SELECT title FROM auction_lots WHERE id = ${lotId}
  `;
  
  const lotTitle = lotInfo.rows[0]?.title || '–õ–æ—Ç';
  
  if (winner.rows.length > 0) {
    const winnerData = winner.rows[0];
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ—Ç —Å –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º
    await sql`
      UPDATE auction_lots 
      SET 
        is_active = false,
        is_completed = true,
        winner_user_id = ${winnerData.user_id},
        winner_name = ${winnerData.user_name},
        current_price = ${winnerData.bid_amount}
      WHERE id = ${lotId}
    `;
    
    // –í–û–ó–í–†–ê–©–ê–ï–ú –ë–ê–õ–õ–´ –í–°–ï–ú –ü–†–û–ò–ì–†–ê–í–®–ò–ú
    const allBids = await sql`
      SELECT user_id, SUM(bid_amount) as total_bids
      FROM auction_bids 
      WHERE lot_id = ${lotId} AND user_id != ${winnerData.user_id}
      GROUP BY user_id
    `;
    
    for (const bid of allBids.rows) {
      await sql`
        UPDATE telegram_users 
        SET total_points = total_points + ${bid.total_bids}
        WHERE id = ${bid.user_id}
      `;
      console.log(`üí∞ Returned ${bid.total_bids} points to user ${bid.user_id} (not winner)`);
    }
    
    console.log(`üèÜ Lot ${lotId} won by ${winnerData.user_name} for ${winnerData.bid_amount} points`);
    
    return res.json({
      success: true,
      winner: {
        ...winnerData,
        lot_title: lotTitle
      },
      final_price: winnerData.bid_amount,
      message: `–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: ${winnerData.user_name} –∑–∞ ${winnerData.bid_amount} –±–∞–ª–ª–æ–≤!`
    });
  } else {
    // –ù–∏–∫—Ç–æ –Ω–µ –¥–µ–ª–∞–ª —Å—Ç–∞–≤–æ–∫ - –ø—Ä–æ—Å—Ç–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ª–æ—Ç
    await sql`
      UPDATE auction_lots 
      SET is_active = false, is_completed = true
      WHERE id = ${lotId}
    `;
    
    console.log(`‚ùå Lot ${lotId} ended with no bids`);
    
    return res.json({
      success: true,
      winner: null,
      final_price: 0,
      lot_title: lotTitle,
      message: '–ù–∏–∫—Ç–æ –Ω–µ —Å–¥–µ–ª–∞–ª —Å—Ç–∞–≤–∫—É'
    });
  }
}

async function announceWinner(res, lotId, message) {
  console.log(`üì¢ Announcing winner for lot ${lotId}: ${message}`);
  
  const lot = await sql`
    SELECT title, winner_name, current_price
    FROM auction_lots
    WHERE id = ${lotId}
  `;
  
  if (lot.rows.length === 0) {
    return res.status(404).json({ error: '–õ–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
  }
  
  const lotData = lot.rows[0];
  
  return res.json({
    success: true,
    lot: lotData,
    announcement: message,
    message: '–û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–∞–Ω–æ!'
  });
}

async function placeBid(res, { user_id, user_name, lot_id, bid_amount, team_id }) {
  console.log(`üí∞ Placing bid: user=${user_name}, lot=${lot_id}, amount=${bid_amount}`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ª–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω
  const lot = await sql`
    SELECT id, is_active, is_completed, current_price, starting_price, title
    FROM auction_lots 
    WHERE id = ${lot_id}
  `;
  
  if (lot.rows.length === 0) {
    return res.status(404).json({ error: '–õ–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
  }
  
  const lotData = lot.rows[0];
  
  if (!lotData.is_active || lotData.is_completed) {
    return res.status(400).json({ error: '–ê—É–∫—Ü–∏–æ–Ω –ø–æ —ç—Ç–æ–º—É –ª–æ—Ç—É –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω' });
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—Ç–∞–≤–∫–∞ –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
  const minBid = Math.max(lotData.current_price + 10, lotData.starting_price);
  if (bid_amount < minBid) {
    return res.status(400).json({ 
      error: `–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ ${minBid} –±–∞–ª–ª–æ–≤` 
    });
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const user = await sql`
    SELECT total_points 
    FROM telegram_users 
    WHERE id = ${user_id}
  `;
  
  if (user.rows.length === 0 || user.rows[0].total_points < bid_amount) {
    return res.status(400).json({ error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤' });
  }
  
  // –†–ï–ó–ï–†–í–ò–†–£–ï–ú –ë–ê–õ–õ–´ –°–†–ê–ó–£ –ü–†–ò –°–¢–ê–í–ö–ï
  await sql`
    UPDATE telegram_users 
    SET total_points = total_points - ${bid_amount}
    WHERE id = ${user_id}
  `;
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞–≤–∫—É
  await sql`
    INSERT INTO auction_bids (lot_id, user_id, user_name, bid_amount, team_id, is_team_bid)
    VALUES (${lot_id}, ${user_id}, ${user_name}, ${bid_amount}, ${team_id}, ${!!team_id})
  `;
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –ª–æ—Ç–∞
  await sql`
    UPDATE auction_lots 
    SET current_price = ${bid_amount}
    WHERE id = ${lot_id}
  `;
  
  console.log(`‚úÖ Bid placed: ${bid_amount} points for "${lotData.title}" (reserved from balance)`);
  
  return res.json({
    success: true,
    bid_amount,
    new_leader: user_name,
    lot_title: lotData.title,
    message: `–°—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞: ${bid_amount} –±–∞–ª–ª–æ–≤ (—Å–ø–∏—Å–∞–Ω–æ —Å –±–∞–ª–∞–Ω—Å–∞)`
  });
}

async function addLot(res, { title, description, starting_price, image_url }) {
  const maxOrder = await sql`SELECT COALESCE(MAX(order_num), 0) as max_order FROM auction_lots`;
  const newOrder = maxOrder.rows[0].max_order + 1;
  
  const result = await sql`
    INSERT INTO auction_lots (title, description, starting_price, image_url, order_num)
    VALUES (${title}, ${description}, ${starting_price || 200}, ${image_url}, ${newOrder})
    RETURNING id
  `;
  
  return res.json({
    success: true,
    lot_id: result.rows[0].id
  });
}
