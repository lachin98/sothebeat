const { IncomingForm } = require('formidable');
const fs = require('fs');
const path = require('path');

module.exports = async (req, res) => {
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }

  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    console.log('üìÅ Starting file upload...');
    console.log('üîç Query params:', req.query);
    console.log('üîç URL:', req.url);

    // –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –ø–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ query –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    const token = req.query.token;
    console.log('üîë Token from query:', token);

    if (token !== 'a') {
      console.log('‚ùå Invalid token, expected "a", got:', token);
      return res.status(401).json({ 
        error: 'Unauthorized',
        received_token: token,
        query: req.query
      });
    }

    // –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–æ–º –¥–ª—è –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏
    const form = new IncomingForm({
      uploadDir: '/tmp',
      keepExtensions: true,
      maxFileSize: 5 * 1024 * 1024, // 5MB
      multiples: true // –†–∞–∑—Ä–µ—à–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    });

    // –ü–∞—Ä—Å–∏–º —Ñ–æ—Ä–º—É
    const parseForm = () => {
      return new Promise((resolve, reject) => {
        form.parse(req, (err, fields, files) => {
          if (err) {
            console.error('Form parse error:', err);
            reject(err);
          } else {
            console.log('üìã Raw fields:', fields);
            console.log('üìé Raw files keys:', Object.keys(files));
            resolve({ fields, files });
          }
        });
      });
    };

    const { fields, files } = await parseForm();

    // –ò—â–µ–º –ª—é–±–æ–π –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    let uploadedFile;
    const fileKeys = Object.keys(files);
    
    if (fileKeys.length > 0) {
      const firstKey = fileKeys[0];
      const fileData = files[firstKey];
      
      if (Array.isArray(fileData)) {
        uploadedFile = fileData[0];
      } else {
        uploadedFile = fileData;
      }
    }

    if (!uploadedFile) {
      console.log('‚ùå No file found in upload');
      return res.status(400).json({ 
        error: 'No file uploaded',
        received_files: fileKeys
      });
    }

    console.log('üìÑ File details:', {
      originalFilename: uploadedFile.originalFilename,
      mimetype: uploadedFile.mimetype,
      size: uploadedFile.size,
      filepath: uploadedFile.filepath
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
    const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/webp'];
    if (!allowedTypes.includes(uploadedFile.mimetype)) {
      return res.status(400).json({ 
        error: 'Invalid file type. Only images are allowed.',
        received_type: uploadedFile.mimetype,
        allowed_types: allowedTypes
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
    if (uploadedFile.size > 5 * 1024 * 1024) {
      return res.status(400).json({ 
        error: 'File too large. Maximum size is 5MB.',
        received_size: uploadedFile.size
      });
    }

    // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    const fileData = fs.readFileSync(uploadedFile.filepath);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    const fileExtension = path.extname(uploadedFile.originalFilename || '.jpg');
    const fileName = `upload_${Date.now()}${fileExtension}`;
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º Base64 data URL
    const base64Data = fileData.toString('base64');
    const dataUrl = `data:${uploadedFile.mimetype};base64,${base64Data}`;

    // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    try {
      fs.unlinkSync(uploadedFile.filepath);
      console.log('üóëÔ∏è Temporary file cleaned up');
    } catch (cleanupError) {
      console.error('Cleanup error:', cleanupError);
    }

    console.log('‚úÖ File upload completed successfully');

    return res.json({
      success: true,
      filename: fileName,
      originalFilename: uploadedFile.originalFilename,
      size: uploadedFile.size,
      mimetype: uploadedFile.mimetype,
      url: dataUrl,
      message: 'File uploaded successfully'
    });

  } catch (error) {
    console.error('‚ùå Upload error:', error);
    
    return res.status(500).json({
      error: 'Upload failed',
      details: error.message,
      stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
    });
  }
};
