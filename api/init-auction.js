const { sql } = require('@vercel/postgres');

// –õ–æ—Ç—ã –∏–∑ –¢–ó
const auctionLots = [
  {
    title: "–ú–µ—Ä—á –æ—Ç –ó–µ—Ä–Ω–æ–≤–∞",
    description: "–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –º–µ—Ä—á –æ—Ç –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ –±–∞—Ä–º–µ–Ω–∞",
    starting_price: 200,
    image_url: "https://via.placeholder.com/300x200/4a90e2/white?text=ZERNOV",
    order_num: 1
  },
  {
    title: "–§—É—Ç–±–æ–ª–∫–∞ —Å –∞–≤—Ç–æ–≥—Ä–∞—Ñ–∞–º–∏ –≤—Å–µ—Ö —Å–ø–∏–∫–µ—Ä–æ–≤ BEAT 2025",
    description: "–£–Ω–∏–∫–∞–ª—å–Ω–∞—è —Ñ—É—Ç–±–æ–ª–∫–∞ —Å –ø–æ–¥–ø–∏—Å—è–º–∏ —Å–ø–∏–∫–µ—Ä–æ–≤",
    starting_price: 200,
    image_url: "https://via.placeholder.com/300x200/9c27b0/white?text=BEAT+2025",
    order_num: 2
  },
  {
    title: "–†–µ–∫–ª–∞–º–∞ –≤ Instagram BEAT",
    description: "–ö—Ä–æ—Å—Å –ø–æ—Å—Ç (–∏–ª–∏ reels) + —Å—Ç–æ—Ä–∏—Å",
    starting_price: 200,
    image_url: "https://via.placeholder.com/300x200/ff9800/white?text=INSTAGRAM",
    order_num: 3
  },
  {
    title: "–ú–µ—Ä—á –æ—Ç –ü–µ—Ä—É–∫–∞",
    description: "–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –º–µ—Ä—á –æ—Ç –ø–æ–ø—É–ª—è—Ä–Ω–æ–≥–æ –±–∞—Ä–º–µ–Ω–∞",
    starting_price: 200,
    image_url: "https://via.placeholder.com/300x200/4caf50/white?text=PERUK",
    order_num: 4
  },
  {
    title: "–ë–µ–∑–ª–∏–º–∏—Ç –Ω–∞ –∫–æ–∫—Ç–µ–π–ª–∏ –Ω–∞ –∞—Ñ—Ç–µ–ø–∞—Ç–∏",
    description: "–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –∫–æ–∫—Ç–µ–π–ª–∏ –Ω–∞ –≤–µ—á–µ—Ä–∏–Ω–∫–µ",
    starting_price: 200,
    image_url: "https://via.placeholder.com/300x200/f44336/white?text=COCKTAILS",
    order_num: 5
  },
  {
    title: "–°–±–æ—Ä–Ω–∏–∫ –º–µ—Ä—á–∞ –æ—Ç –±—Ä–µ–Ω–¥–æ–≤ Pernod Ricard",
    description: "–ù–∞–±–æ—Ä —Ñ–∏—Ä–º–µ–Ω–Ω–æ–≥–æ –º–µ—Ä—á–∞ –æ—Ç –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –±—Ä–µ–Ω–¥–æ–≤",
    starting_price: 200,
    image_url: "https://via.placeholder.com/300x200/607d8b/white?text=PERNOD",
    order_num: 6
  },
  {
    title: "–Ø—â–∏–∫ —Ä–∞–∑–Ω–æ–≥–æ –∞–ª–∫–æ–≥–æ–ª—è",
    description: "ARARAT Akhtamar, Ballantines 7, Jameson Black Barrel, Havana Club 7, Olmeca Altos, Elyx",
    starting_price: 200,
    image_url: "https://via.placeholder.com/300x200/795548/white?text=ALCOHOL+BOX",
    order_num: 7
  }
];

module.exports = async (req, res) => {
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'POST');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
  
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  const { secret } = req.body;
  if (secret !== 'init-auction-2025') {
    return res.status(401).json({ error: 'Unauthorized' });
  }

  try {
    console.log('üèõÔ∏è –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –∞—É–∫—Ü–∏–æ–Ω–∞...');

    // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ –æ–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    await sql`DROP TABLE IF EXISTS auction_bids CASCADE`;
    await sql`DROP TABLE IF EXISTS auction_lots CASCADE`;
    console.log('–£–¥–∞–ª–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ —Ç–∞–±–ª–∏—Ü—ã');

    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ª–æ—Ç–æ–≤
    await sql`
      CREATE TABLE auction_lots (
        id SERIAL PRIMARY KEY,
        title VARCHAR(255) NOT NULL,
        description TEXT,
        starting_price INTEGER DEFAULT 200,
        current_price INTEGER DEFAULT 0,
        image_url TEXT,
        is_active BOOLEAN DEFAULT false,
        is_completed BOOLEAN DEFAULT false,
        winner_user_id BIGINT,
        winner_name VARCHAR(255),
        order_num INTEGER DEFAULT 0,
        auction_started_at TIMESTAMP,
        auction_ends_at TIMESTAMP,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `;
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ auction_lots —Å–æ–∑–¥–∞–Ω–∞');

    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å—Ç–∞–≤–æ–∫
    await sql`
      CREATE TABLE auction_bids (
        id SERIAL PRIMARY KEY,
        lot_id INTEGER REFERENCES auction_lots(id) ON DELETE CASCADE,
        user_id BIGINT NOT NULL,
        user_name VARCHAR(255),
        bid_amount INTEGER NOT NULL,
        is_team_bid BOOLEAN DEFAULT false,
        team_id VARCHAR(50),
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `;
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ auction_bids —Å–æ–∑–¥–∞–Ω–∞');

    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
    await sql`CREATE INDEX idx_auction_lots_active ON auction_lots(is_active, order_num)`;
    await sql`CREATE INDEX idx_auction_bids_lot ON auction_bids(lot_id, created_at DESC)`;
    await sql`CREATE INDEX idx_auction_bids_user ON auction_bids(user_id)`;
    console.log('‚úÖ –ò–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã');

    // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ—Ç—ã –∏–∑ –¢–ó
    for (const lot of auctionLots) {
      await sql`
        INSERT INTO auction_lots (title, description, starting_price, image_url, order_num)
        VALUES (${lot.title}, ${lot.description}, ${lot.starting_price}, ${lot.image_url}, ${lot.order_num})
      `;
    }
    console.log('‚úÖ –õ–æ—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å
    const lotsCount = await sql`SELECT COUNT(*) as count FROM auction_lots`;
    const bidsCount = await sql`SELECT COUNT(*) as count FROM auction_bids`;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü
    const lotsStructure = await sql`
      SELECT column_name, data_type 
      FROM information_schema.columns 
      WHERE table_name = 'auction_lots'
      ORDER BY ordinal_position
    `;
    
    const bidsStructure = await sql`
      SELECT column_name, data_type 
      FROM information_schema.columns 
      WHERE table_name = 'auction_bids'
      ORDER BY ordinal_position
    `;

    console.log('–°—Ç—Ä—É–∫—Ç—É—Ä–∞ auction_lots:', lotsStructure.rows);
    console.log('–°—Ç—Ä—É–∫—Ç—É—Ä–∞ auction_bids:', bidsStructure.rows);

    return res.json({
      success: true,
      message: '–ê—É–∫—Ü–∏–æ–Ω –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω',
      lots: parseInt(lotsCount.rows[0].count),
      bids: parseInt(bidsCount.rows[0].count),
      tables_created: {
        auction_lots: lotsStructure.rows.length,
        auction_bids: bidsStructure.rows.length
      }
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞—É–∫—Ü–∏–æ–Ω–∞:', error);
    return res.status(500).json({
      success: false,
      error: error.message,
      details: error.toString()
    });
  }
};
